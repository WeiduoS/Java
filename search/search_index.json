{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Preface"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"IO Streams/File/File/","text":"File The File class from the java.io package, allows us to work with files. To use the File class, create an object of the class, and specify the filename or directory name API Contructors File(String parent,String child) File(File parent, String child) File(String name) File Path File.separator: Platform dependent default name-separator character as String. For windows, it\u2019s \u2018\\\u2019 and for unix it\u2019s \u2018/\u2019. File.separatorChar: Same as separator but it\u2019s char. File.pathSeparator: Platform dependent variable for path-separator. For example PATH or CLASSPATH variable list of paths separated by \u2018:\u2019 in Unix systems and \u2018;\u2019 in Windows system. File.pathSeparatorChar: Same as pathSeparator but it\u2019s char. getName(): Returns the name of the file or directory denoted by this abstract pathname. getPath(): Converts this abstract pathname into a pathname string. getAbsolutePath(): Returns the absolute pathname string of this abstract pathname. getParent(): Returns the pathname string of this abstract pathname s parent, or null if this pathname does not name a parent directory. File Status exists(): Tests whether the file or directory denoted by this abstract pathname exists. isFile(): Tests whether the file denoted by this abstract pathname is a normal file. isDirectory(): Tests whether the file denoted by this abstract pathname is a directory. length(): Returns the length of the file denoted by this abstract pathname. T Create File createNewFile(): Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist delete(): Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. mkdir(): Creates the directory named by this abstract pathname. mkdirs(): Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. List File list(): Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. listFiles(): Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. listRoots(): List the available filesystem roots. File Path import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = D:\\\\java\\\\IO\\\\IO.png ; System . out . println ( File . separator ); path = D:/java/IO/IO.png ; path = D: + File . separator + java + File . separator + IO + File . separator + IO.png ; System . out . println ( path ); path = src/images/ball.png ; File src = new File ( path ); System . out . println ( src . length ()); System . out . println ( src . getAbsolutePath ()); System . out . println ( System . getProperty ( user.dir )); src = new File ( src/images/ , ball.png ); System . out . println ( src . length ()); src = new File ( new File ( src/images/ ), ball.png ); System . out . println ( src . length ()); System . out . println ( name: + src . getName ()); System . out . println ( path: + src . getPath ()); System . out . println ( absolute path: + src . getAbsolutePath ()); System . out . println ( parent path: + src . getParent ()); } } File Status import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = src/images/ball.png ; File src = new File ( path ); System . out . println ( exist: + src . exists ()); System . out . println ( is file: + src . isFile ()); System . out . println ( is directory: + src . isDirectory ()); System . out . println ( src . length ()); } } Create File import java.io.File ; public class FileDemo { public static void main ( String [] args ) throws IOException { File src = new File ( src/images/io.txt ); boolean flag = src . createNewFile (); System . out . println ( create new file: + flag ); flag = src . delete (); System . out . println ( delete new file: + flag ); File dir = new File ( src/images/dirs/dir ); flag = dir . mkdir (); System . out . println ( flag: + flag ); flag = dir . mkdirs (); System . out . println ( flag: + flag ); } } List File import java.io.File ; public class FileDemo { static int len = 0 ; public static void main ( String [] args ) throws IOException { File dir = new File ( src ); String [] subList = dir . list (); for ( String s : subList ) { System . out . println ( s: + s ); } File [] subFile = dir . listFiles (); for ( File f : subFile ) { System . out . println ( f . getAbsolutePath ()); } File [] roots = File . listRoots (); for ( File f : roots ) { System . out . println ( f . getAbsolutePath ()); } System . out . println ( count ( src )); } public static int count ( File src ) { if ( null == src || ! src . exists ()) return 0 ; for ( File f : src . listFiles ()) { if ( f . isFile ()) { len += f . length (); } else { len += count ( f ); } } return len ; } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"1 File"},{"location":"IO Streams/File/File/#file","text":"The File class from the java.io package, allows us to work with files. To use the File class, create an object of the class, and specify the filename or directory name","title":"File"},{"location":"IO Streams/File/File/#api","text":"Contructors File(String parent,String child) File(File parent, String child) File(String name) File Path File.separator: Platform dependent default name-separator character as String. For windows, it\u2019s \u2018\\\u2019 and for unix it\u2019s \u2018/\u2019. File.separatorChar: Same as separator but it\u2019s char. File.pathSeparator: Platform dependent variable for path-separator. For example PATH or CLASSPATH variable list of paths separated by \u2018:\u2019 in Unix systems and \u2018;\u2019 in Windows system. File.pathSeparatorChar: Same as pathSeparator but it\u2019s char. getName(): Returns the name of the file or directory denoted by this abstract pathname. getPath(): Converts this abstract pathname into a pathname string. getAbsolutePath(): Returns the absolute pathname string of this abstract pathname. getParent(): Returns the pathname string of this abstract pathname s parent, or null if this pathname does not name a parent directory. File Status exists(): Tests whether the file or directory denoted by this abstract pathname exists. isFile(): Tests whether the file denoted by this abstract pathname is a normal file. isDirectory(): Tests whether the file denoted by this abstract pathname is a directory. length(): Returns the length of the file denoted by this abstract pathname. T Create File createNewFile(): Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist delete(): Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. mkdir(): Creates the directory named by this abstract pathname. mkdirs(): Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. List File list(): Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. listFiles(): Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. listRoots(): List the available filesystem roots.","title":"API"},{"location":"IO Streams/File/File/#file-path","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = D:\\\\java\\\\IO\\\\IO.png ; System . out . println ( File . separator ); path = D:/java/IO/IO.png ; path = D: + File . separator + java + File . separator + IO + File . separator + IO.png ; System . out . println ( path ); path = src/images/ball.png ; File src = new File ( path ); System . out . println ( src . length ()); System . out . println ( src . getAbsolutePath ()); System . out . println ( System . getProperty ( user.dir )); src = new File ( src/images/ , ball.png ); System . out . println ( src . length ()); src = new File ( new File ( src/images/ ), ball.png ); System . out . println ( src . length ()); System . out . println ( name: + src . getName ()); System . out . println ( path: + src . getPath ()); System . out . println ( absolute path: + src . getAbsolutePath ()); System . out . println ( parent path: + src . getParent ()); } }","title":"File Path"},{"location":"IO Streams/File/File/#file-status","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = src/images/ball.png ; File src = new File ( path ); System . out . println ( exist: + src . exists ()); System . out . println ( is file: + src . isFile ()); System . out . println ( is directory: + src . isDirectory ()); System . out . println ( src . length ()); } }","title":"File Status"},{"location":"IO Streams/File/File/#create-file","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) throws IOException { File src = new File ( src/images/io.txt ); boolean flag = src . createNewFile (); System . out . println ( create new file: + flag ); flag = src . delete (); System . out . println ( delete new file: + flag ); File dir = new File ( src/images/dirs/dir ); flag = dir . mkdir (); System . out . println ( flag: + flag ); flag = dir . mkdirs (); System . out . println ( flag: + flag ); } }","title":"Create File"},{"location":"IO Streams/File/File/#list-file","text":"import java.io.File ; public class FileDemo { static int len = 0 ; public static void main ( String [] args ) throws IOException { File dir = new File ( src ); String [] subList = dir . list (); for ( String s : subList ) { System . out . println ( s: + s ); } File [] subFile = dir . listFiles (); for ( File f : subFile ) { System . out . println ( f . getAbsolutePath ()); } File [] roots = File . listRoots (); for ( File f : roots ) { System . out . println ( f . getAbsolutePath ()); } System . out . println ( count ( src )); } public static int count ( File src ) { if ( null == src || ! src . exists ()) return 0 ; for ( File f : src . listFiles ()) { if ( f . isFile ()) { len += f . length (); } else { len += count ( f ); } } return len ; } }","title":"List File"},{"location":"IO Streams/File/File/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"IO Streams/File/File/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"IO Streams/IO/IO/","text":"Java I/O Overview Byte Stream import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileInputStream in = null ; FileOutputStream out = null ; try { in = new FileInputStream ( src ); out = new FileOutputStream ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Character Streams import java.io.File ; import java.io.FileNotFoundException ; import java.io.FileReader ; import java.io.FileWriter ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileReader in = null ; FileWriter out = null ; try { in = new FileReader ( src ); out = new FileWriter ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Installing A step by step series of examples that tell you how to get a development env running Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo Running the tests Explain how to run the automated tests for this system Break down into end to end tests Explain what these tests test and why Give an example And coding style tests Explain what these tests test and why Give an example Deployment Add additional notes about how to deploy this on a live system Built With Dropwizard - The web framework used Maven - Dependency Management ROME - Used to generate RSS Feeds Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Versioning We use SemVer for versioning. For the versions available, see the tags on this repository . Authors Billie Thompson - Initial work - PurpleBooth See also the list of contributors who participated in this project. License This project is licensed under the MIT License - see the LICENSE.md file for details Acknowledgments Hat tip to anyone whose code was used Inspiration etc","title":"2 IO"},{"location":"IO Streams/IO/IO/#java-io","text":"","title":"Java I/O"},{"location":"IO Streams/IO/IO/#overview","text":"","title":"Overview"},{"location":"IO Streams/IO/IO/#byte-stream","text":"import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileInputStream in = null ; FileOutputStream out = null ; try { in = new FileInputStream ( src ); out = new FileOutputStream ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Byte Stream"},{"location":"IO Streams/IO/IO/#character-streams","text":"import java.io.File ; import java.io.FileNotFoundException ; import java.io.FileReader ; import java.io.FileWriter ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileReader in = null ; FileWriter out = null ; try { in = new FileReader ( src ); out = new FileWriter ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Character Streams"},{"location":"IO Streams/IO/IO/#installing","text":"A step by step series of examples that tell you how to get a development env running Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo","title":"Installing"},{"location":"IO Streams/IO/IO/#running-the-tests","text":"Explain how to run the automated tests for this system","title":"Running the tests"},{"location":"IO Streams/IO/IO/#break-down-into-end-to-end-tests","text":"Explain what these tests test and why Give an example","title":"Break down into end to end tests"},{"location":"IO Streams/IO/IO/#and-coding-style-tests","text":"Explain what these tests test and why Give an example","title":"And coding style tests"},{"location":"IO Streams/IO/IO/#deployment","text":"Add additional notes about how to deploy this on a live system","title":"Deployment"},{"location":"IO Streams/IO/IO/#built-with","text":"Dropwizard - The web framework used Maven - Dependency Management ROME - Used to generate RSS Feeds","title":"Built With"},{"location":"IO Streams/IO/IO/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"IO Streams/IO/IO/#versioning","text":"We use SemVer for versioning. For the versions available, see the tags on this repository .","title":"Versioning"},{"location":"IO Streams/IO/IO/#authors","text":"Billie Thompson - Initial work - PurpleBooth See also the list of contributors who participated in this project.","title":"Authors"},{"location":"IO Streams/IO/IO/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"IO Streams/IO/IO/#acknowledgments","text":"Hat tip to anyone whose code was used Inspiration etc","title":"Acknowledgments"}]}