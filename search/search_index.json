{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Preface"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"IO Streams/File/File/","text":"File The File class from the java.io package, allows us to work with files. To use the File class, create an object of the class, and specify the filename or directory name API Contructors File(String parent,String child) File(File parent, String child) File(String name) File Path File.separator: Platform dependent default name-separator character as String. For windows, it\u2019s \u2018\\\u2019 and for unix it\u2019s \u2018/\u2019. File.separatorChar: Same as separator but it\u2019s char. File.pathSeparator: Platform dependent variable for path-separator. For example PATH or CLASSPATH variable list of paths separated by \u2018:\u2019 in Unix systems and \u2018;\u2019 in Windows system. File.pathSeparatorChar: Same as pathSeparator but it\u2019s char. getName(): Returns the name of the file or directory denoted by this abstract pathname. getPath(): Converts this abstract pathname into a pathname string. getAbsolutePath(): Returns the absolute pathname string of this abstract pathname. getParent(): Returns the pathname string of this abstract pathname s parent, or null if this pathname does not name a parent directory. File Status exists(): Tests whether the file or directory denoted by this abstract pathname exists. isFile(): Tests whether the file denoted by this abstract pathname is a normal file. isDirectory(): Tests whether the file denoted by this abstract pathname is a directory. length(): Returns the length of the file denoted by this abstract pathname. T Create File createNewFile(): Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist delete(): Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. mkdir(): Creates the directory named by this abstract pathname. mkdirs(): Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. List File list(): Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. listFiles(): Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. listRoots(): List the available filesystem roots. File Path import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = D:\\\\java\\\\IO\\\\IO.png ; System . out . println ( File . separator ); path = D:/java/IO/IO.png ; path = D: + File . separator + java + File . separator + IO + File . separator + IO.png ; System . out . println ( path ); path = src/images/ball.png ; File src = new File ( path ); System . out . println ( src . length ()); System . out . println ( src . getAbsolutePath ()); System . out . println ( System . getProperty ( user.dir )); src = new File ( src/images/ , ball.png ); System . out . println ( src . length ()); src = new File ( new File ( src/images/ ), ball.png ); System . out . println ( src . length ()); System . out . println ( name: + src . getName ()); System . out . println ( path: + src . getPath ()); System . out . println ( absolute path: + src . getAbsolutePath ()); System . out . println ( parent path: + src . getParent ()); } } File Status import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = src/images/ball.png ; File src = new File ( path ); System . out . println ( exist: + src . exists ()); System . out . println ( is file: + src . isFile ()); System . out . println ( is directory: + src . isDirectory ()); System . out . println ( src . length ()); } } Create File import java.io.File ; public class FileDemo { public static void main ( String [] args ) throws IOException { File src = new File ( src/images/io.txt ); boolean flag = src . createNewFile (); System . out . println ( create new file: + flag ); flag = src . delete (); System . out . println ( delete new file: + flag ); File dir = new File ( src/images/dirs/dir ); flag = dir . mkdir (); System . out . println ( flag: + flag ); flag = dir . mkdirs (); System . out . println ( flag: + flag ); } } List File import java.io.File ; public class FileDemo { static int len = 0 ; public static void main ( String [] args ) throws IOException { File dir = new File ( src ); String [] subList = dir . list (); for ( String s : subList ) { System . out . println ( s: + s ); } File [] subFile = dir . listFiles (); for ( File f : subFile ) { System . out . println ( f . getAbsolutePath ()); } File [] roots = File . listRoots (); for ( File f : roots ) { System . out . println ( f . getAbsolutePath ()); } System . out . println ( count ( src )); } public static int count ( File src ) { if ( null == src || ! src . exists ()) return 0 ; for ( File f : src . listFiles ()) { if ( f . isFile ()) { len += f . length (); } else { len += count ( f ); } } return len ; } } Authors Weiduo Sun License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"1 File"},{"location":"IO Streams/File/File/#file","text":"The File class from the java.io package, allows us to work with files. To use the File class, create an object of the class, and specify the filename or directory name","title":"File"},{"location":"IO Streams/File/File/#api","text":"Contructors File(String parent,String child) File(File parent, String child) File(String name) File Path File.separator: Platform dependent default name-separator character as String. For windows, it\u2019s \u2018\\\u2019 and for unix it\u2019s \u2018/\u2019. File.separatorChar: Same as separator but it\u2019s char. File.pathSeparator: Platform dependent variable for path-separator. For example PATH or CLASSPATH variable list of paths separated by \u2018:\u2019 in Unix systems and \u2018;\u2019 in Windows system. File.pathSeparatorChar: Same as pathSeparator but it\u2019s char. getName(): Returns the name of the file or directory denoted by this abstract pathname. getPath(): Converts this abstract pathname into a pathname string. getAbsolutePath(): Returns the absolute pathname string of this abstract pathname. getParent(): Returns the pathname string of this abstract pathname s parent, or null if this pathname does not name a parent directory. File Status exists(): Tests whether the file or directory denoted by this abstract pathname exists. isFile(): Tests whether the file denoted by this abstract pathname is a normal file. isDirectory(): Tests whether the file denoted by this abstract pathname is a directory. length(): Returns the length of the file denoted by this abstract pathname. T Create File createNewFile(): Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist delete(): Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. mkdir(): Creates the directory named by this abstract pathname. mkdirs(): Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. List File list(): Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. listFiles(): Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. listRoots(): List the available filesystem roots.","title":"API"},{"location":"IO Streams/File/File/#file-path","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = D:\\\\java\\\\IO\\\\IO.png ; System . out . println ( File . separator ); path = D:/java/IO/IO.png ; path = D: + File . separator + java + File . separator + IO + File . separator + IO.png ; System . out . println ( path ); path = src/images/ball.png ; File src = new File ( path ); System . out . println ( src . length ()); System . out . println ( src . getAbsolutePath ()); System . out . println ( System . getProperty ( user.dir )); src = new File ( src/images/ , ball.png ); System . out . println ( src . length ()); src = new File ( new File ( src/images/ ), ball.png ); System . out . println ( src . length ()); System . out . println ( name: + src . getName ()); System . out . println ( path: + src . getPath ()); System . out . println ( absolute path: + src . getAbsolutePath ()); System . out . println ( parent path: + src . getParent ()); } }","title":"File Path"},{"location":"IO Streams/File/File/#file-status","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = src/images/ball.png ; File src = new File ( path ); System . out . println ( exist: + src . exists ()); System . out . println ( is file: + src . isFile ()); System . out . println ( is directory: + src . isDirectory ()); System . out . println ( src . length ()); } }","title":"File Status"},{"location":"IO Streams/File/File/#create-file","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) throws IOException { File src = new File ( src/images/io.txt ); boolean flag = src . createNewFile (); System . out . println ( create new file: + flag ); flag = src . delete (); System . out . println ( delete new file: + flag ); File dir = new File ( src/images/dirs/dir ); flag = dir . mkdir (); System . out . println ( flag: + flag ); flag = dir . mkdirs (); System . out . println ( flag: + flag ); } }","title":"Create File"},{"location":"IO Streams/File/File/#list-file","text":"import java.io.File ; public class FileDemo { static int len = 0 ; public static void main ( String [] args ) throws IOException { File dir = new File ( src ); String [] subList = dir . list (); for ( String s : subList ) { System . out . println ( s: + s ); } File [] subFile = dir . listFiles (); for ( File f : subFile ) { System . out . println ( f . getAbsolutePath ()); } File [] roots = File . listRoots (); for ( File f : roots ) { System . out . println ( f . getAbsolutePath ()); } System . out . println ( count ( src )); } public static int count ( File src ) { if ( null == src || ! src . exists ()) return 0 ; for ( File f : src . listFiles ()) { if ( f . isFile ()) { len += f . length (); } else { len += count ( f ); } } return len ; } }","title":"List File"},{"location":"IO Streams/File/File/#authors","text":"Weiduo Sun","title":"Authors"},{"location":"IO Streams/File/File/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"IO Streams/IO/IO/","text":"Java I/O Overview InputStream: Abstract class ByteArrayInputStream\u3001StringBufferInputStream(StreamBufferInputStream)\u3001FileInputStream: read from Byte array,StringBuffer and local file PipedInputStream: read from multiple shared threads ObjectInputStream: FilterInputStream s sub class OutputStream: Abstract class ByteArrayOutputStream\u3001FileOutputStream: write into Byte array,StringBuffer and local file PipedInputStream: write into multiple shared threads ObjectOutputStream: FilterInputStream s sub class Byte Stream import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileInputStream in = null ; FileOutputStream out = null ; try { in = new FileInputStream ( src ); out = new FileOutputStream ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Character Streams import java.io.File ; import java.io.FileNotFoundException ; import java.io.FileReader ; import java.io.FileWriter ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileReader in = null ; FileWriter out = null ; try { in = new FileReader ( src ); out = new FileWriter ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Byte Array input import java.io.ByteArrayInputStream ; import java.io.IOException ; import java.io.InputStream ; public class IODemo { public static void main ( String [] args ) { byte [] src = hello world! . getBytes (); InputStream in = null ; try { in = new ByteArrayInputStream ( src ); byte [] flush = new byte [ 5 ]; int len ; while (( len = in . read ()) != - 1 ) { String str = new String ( flush , 0 , len ); System . out . println ( str ); } } catch ( IOException e ) { e . printStackTrace (); } finally { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } Byte Array Stream import java.io.ByteArrayInputStream ; import java.io.ByteArrayOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { byte [] datas = fileToByteArray ( src/images/p.png ); System . out . println ( datas . length ); byteArrayToFile ( datas , src/images/p-byte.png ); } public static byte [] fileToByteArray ( String filePath ) { File src = new File ( filePath ); byte [] dest = null ; InputStream is = null ; ByteArrayOutputStream baos = null ; try { is = new FileInputStream ( src ); baos = new ByteArrayOutputStream (); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { baos . write ( flush , 0 , len ); } baos . flush (); dest = baos . toByteArray (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } } return dest ; } public static void byteArrayToFile ( byte [] src , String filePath ) { File dest = new File ( filePath ); InputStream is = null ; OutputStream os = null ; try { is = new ByteArrayInputStream ( src ); os = new FileOutputStream ( dest ); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } if ( null != os ) { try { os . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Buffer Stream import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { long t1 = System . currentTimeMillis (); copy ( src/images/IO.mp4 , src/images/IO-copy.mp4 ); long t2 = System . currentTimeMillis (); System . out . println ( t2 - t1 ); } public static void copy ( String srcPath , String destPath ) { //1\u3001\u521b\u5efa\u6e90 File src = new File ( srcPath ); //\u6e90\u5934 File dest = new File ( destPath ); //\u76ee\u7684\u5730 //2\u3001\u9009\u62e9\u6d41 try ( InputStream is = new BufferedInputStream ( new FileInputStream ( src )); OutputStream os = new BufferedOutputStream ( new FileOutputStream ( dest ));) { //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; while (( len = is . read ( flush ))! = - 1 ) { os . write ( flush , 0 , len ); //\u5206\u6bb5\u5199\u51fa } os . flush (); } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } } } Object Stream import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.ObjectInputStream ; import java.io.ObjectOutputStream ; import java.util.Date ; public class IODemo { public static void main ( String [] args ) throws FileNotFoundException , IOException , ClassNotFoundException { // \u5199\u51fa -- \u5e8f\u5217\u5316 ObjectOutputStream oos = new ObjectOutputStream ( new BufferedOutputStream ( new FileOutputStream ( src/images/obj.ser ))); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e oos . writeUTF ( coding ); oos . writeInt ( 18 ); oos . writeBoolean ( false ); oos . writeChar ( a ); // \u5bf9\u8c61 oos . writeObject ( string ); oos . writeObject ( new Date ()); Employee emp = new Employee ( Jim , 400 ); oos . writeObject ( emp ); oos . flush (); oos . close (); // \u8bfb\u53d6 -- \u53cd\u5e8f\u5217\u5316 ObjectInputStream ois = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( obj.ser ))); // \u987a\u5e8f\u4e0e\u5199\u51fa\u4e00\u81f4 String msg = ois . readUTF (); int age = ois . readInt (); boolean flag = ois . readBoolean (); char ch = ois . readChar (); System . out . println ( msg ); System . out . println ( age ); System . out . println ( flag ); System . out . println ( ch ); // \u5bf9\u8c61\u7684\u6570\u636e\u8fd8\u539f Object str = ois . readObject (); Object date = ois . readObject (); Object employee = ois . readObject (); if ( str instanceof String ) { String strObj = ( String ) str ; System . out . println ( strObj ); } if ( date instanceof Date ) { Date dateObj = ( Date ) date ; System . out . println ( dateObj ); } if ( employee instanceof Employee ) { Employee empObj = ( Employee ) employee ; System . out . println ( empObj . getName () + -- + empObj . getSalary ()); } ois . close (); } } //Javabean class Employee implements java . io . Serializable { private static final long serialVersionUID = 1208818830691668617L ; private transient String name ; //\u8be5\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316 private double salary ; public Employee () { } public Employee ( String name , double salary ) { this . name = name ; this . salary = salary ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public double getSalary () { return salary ; } public void setSalary ( double salary ) { this . salary = salary ; } } Random Access import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; import java.io.RandomAccessFile ; import java.io.SequenceInputStream ; import java.util.ArrayList ; import java.util.List ; import java.util.Vector ; public class SplitFile { //\u6e90\u5934 private File src ; //\u76ee\u7684\u5730(\u6587\u4ef6\u5939) private String destDir ; //\u6240\u6709\u5206\u5272\u540e\u7684\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 private List String destPaths ; //\u6bcf\u5757\u5927\u5c0f private int blockSize ; //\u5757\u6570: \u591a\u5c11\u5757 private int size ; public SplitFile ( String srcPath , String destDir ) { this ( srcPath , destDir , 1024 ); } public SplitFile ( String srcPath , String destDir , int blockSize ) { this . src = new File ( srcPath ); this . destDir = destDir ; this . blockSize = blockSize ; this . destPaths = new ArrayList String (); //\u521d\u59cb\u5316 init (); } //\u521d\u59cb\u5316 private void init () { //\u603b\u957f\u5ea6 long len = this . src . length (); //\u5757\u6570: \u591a\u5c11\u5757 this . size = ( int ) Math . ceil ( len * 1.0 / blockSize ); //\u8def\u5f84 for ( int i = 0 ; i size ; i ++) { this . destPaths . add ( this . destDir + / + i + - + this . src . getName ()); } } /** * \u5206\u5272 * 1\u3001\u8ba1\u7b97\u6bcf\u4e00\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u53ca\u5927\u5c0f * 2\u3001\u5206\u5272 * @throws IOException */ public void split () throws IOException { //\u603b\u957f\u5ea6 long len = src . length (); //\u8d77\u59cb\u4f4d\u7f6e\u548c\u5b9e\u9645\u5927\u5c0f int beginPos = 0 ; int actualSize = ( int )( blockSize len ? len : blockSize ); for ( int i = 0 ; i size ; i ++) { beginPos = i * blockSize ; if ( i == size - 1 ) { //\u6700\u540e\u4e00\u5757 actualSize = ( int ) len ; } else { actualSize = blockSize ; len -= actualSize ; //\u5269\u4f59\u91cf } splitDetail ( i , beginPos , actualSize ); } } /** * \u6307\u5b9a\u7b2ci\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e \u548c\u5b9e\u9645\u957f\u5ea6 * @param i * @param beginPos * @param actualSize * @throws IOException */ private void splitDetail ( int i , int beginPos , int actualSize ) throws IOException { RandomAccessFile raf = new RandomAccessFile ( this . src , r ); RandomAccessFile raf2 = new RandomAccessFile ( this . destPaths . get ( i ), rw ); //\u968f\u673a\u8bfb\u53d6 raf . seek ( beginPos ); //\u8bfb\u53d6 //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; //\u63a5\u6536\u957f\u5ea6 while (( len = raf . read ( flush )) != - 1 ) { if ( actualSize len ) { //\u83b7\u53d6\u672c\u6b21\u8bfb\u53d6\u7684\u6240\u6709\u5185\u5bb9 raf2 . write ( flush , 0 , len ); actualSize -= len ; } else { raf2 . write ( flush , 0 , actualSize ); break ; } } raf2 . close (); raf . close (); } /** * \u6587\u4ef6\u7684\u5408\u5e76 * @throws IOException */ public void merge ( String destPath ) throws IOException { //\u8f93\u51fa\u6d41 OutputStream os = new BufferedOutputStream ( new FileOutputStream ( destPath , true )); //\u8f93\u5165\u6d41 for ( int i = 0 ; i destPaths . size (); i ++) { InputStream is = new BufferedInputStream ( new FileInputStream ( destPaths . get ( i ))); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); is . close (); } os . close (); } public static void main ( String [] args ) throws IOException { SplitFile sf = new SplitFile ( src/main/java/basic/IO/Copy.java , src/images/ ) ; sf . split (); sf . merge ( src/images/merge01.java ); } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"2 IO"},{"location":"IO Streams/IO/IO/#java-io","text":"","title":"Java I/O"},{"location":"IO Streams/IO/IO/#overview","text":"InputStream: Abstract class ByteArrayInputStream\u3001StringBufferInputStream(StreamBufferInputStream)\u3001FileInputStream: read from Byte array,StringBuffer and local file PipedInputStream: read from multiple shared threads ObjectInputStream: FilterInputStream s sub class OutputStream: Abstract class ByteArrayOutputStream\u3001FileOutputStream: write into Byte array,StringBuffer and local file PipedInputStream: write into multiple shared threads ObjectOutputStream: FilterInputStream s sub class","title":"Overview"},{"location":"IO Streams/IO/IO/#byte-stream","text":"import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileInputStream in = null ; FileOutputStream out = null ; try { in = new FileInputStream ( src ); out = new FileOutputStream ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Byte Stream"},{"location":"IO Streams/IO/IO/#character-streams","text":"import java.io.File ; import java.io.FileNotFoundException ; import java.io.FileReader ; import java.io.FileWriter ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileReader in = null ; FileWriter out = null ; try { in = new FileReader ( src ); out = new FileWriter ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Character Streams"},{"location":"IO Streams/IO/IO/#byte-array-input","text":"import java.io.ByteArrayInputStream ; import java.io.IOException ; import java.io.InputStream ; public class IODemo { public static void main ( String [] args ) { byte [] src = hello world! . getBytes (); InputStream in = null ; try { in = new ByteArrayInputStream ( src ); byte [] flush = new byte [ 5 ]; int len ; while (( len = in . read ()) != - 1 ) { String str = new String ( flush , 0 , len ); System . out . println ( str ); } } catch ( IOException e ) { e . printStackTrace (); } finally { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } } }","title":"Byte Array input"},{"location":"IO Streams/IO/IO/#byte-array-stream","text":"import java.io.ByteArrayInputStream ; import java.io.ByteArrayOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { byte [] datas = fileToByteArray ( src/images/p.png ); System . out . println ( datas . length ); byteArrayToFile ( datas , src/images/p-byte.png ); } public static byte [] fileToByteArray ( String filePath ) { File src = new File ( filePath ); byte [] dest = null ; InputStream is = null ; ByteArrayOutputStream baos = null ; try { is = new FileInputStream ( src ); baos = new ByteArrayOutputStream (); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { baos . write ( flush , 0 , len ); } baos . flush (); dest = baos . toByteArray (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } } return dest ; } public static void byteArrayToFile ( byte [] src , String filePath ) { File dest = new File ( filePath ); InputStream is = null ; OutputStream os = null ; try { is = new ByteArrayInputStream ( src ); os = new FileOutputStream ( dest ); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } if ( null != os ) { try { os . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Byte Array Stream"},{"location":"IO Streams/IO/IO/#buffer-stream","text":"import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { long t1 = System . currentTimeMillis (); copy ( src/images/IO.mp4 , src/images/IO-copy.mp4 ); long t2 = System . currentTimeMillis (); System . out . println ( t2 - t1 ); } public static void copy ( String srcPath , String destPath ) { //1\u3001\u521b\u5efa\u6e90 File src = new File ( srcPath ); //\u6e90\u5934 File dest = new File ( destPath ); //\u76ee\u7684\u5730 //2\u3001\u9009\u62e9\u6d41 try ( InputStream is = new BufferedInputStream ( new FileInputStream ( src )); OutputStream os = new BufferedOutputStream ( new FileOutputStream ( dest ));) { //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; while (( len = is . read ( flush ))! = - 1 ) { os . write ( flush , 0 , len ); //\u5206\u6bb5\u5199\u51fa } os . flush (); } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } } }","title":"Buffer Stream"},{"location":"IO Streams/IO/IO/#object-stream","text":"import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.ObjectInputStream ; import java.io.ObjectOutputStream ; import java.util.Date ; public class IODemo { public static void main ( String [] args ) throws FileNotFoundException , IOException , ClassNotFoundException { // \u5199\u51fa -- \u5e8f\u5217\u5316 ObjectOutputStream oos = new ObjectOutputStream ( new BufferedOutputStream ( new FileOutputStream ( src/images/obj.ser ))); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e oos . writeUTF ( coding ); oos . writeInt ( 18 ); oos . writeBoolean ( false ); oos . writeChar ( a ); // \u5bf9\u8c61 oos . writeObject ( string ); oos . writeObject ( new Date ()); Employee emp = new Employee ( Jim , 400 ); oos . writeObject ( emp ); oos . flush (); oos . close (); // \u8bfb\u53d6 -- \u53cd\u5e8f\u5217\u5316 ObjectInputStream ois = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( obj.ser ))); // \u987a\u5e8f\u4e0e\u5199\u51fa\u4e00\u81f4 String msg = ois . readUTF (); int age = ois . readInt (); boolean flag = ois . readBoolean (); char ch = ois . readChar (); System . out . println ( msg ); System . out . println ( age ); System . out . println ( flag ); System . out . println ( ch ); // \u5bf9\u8c61\u7684\u6570\u636e\u8fd8\u539f Object str = ois . readObject (); Object date = ois . readObject (); Object employee = ois . readObject (); if ( str instanceof String ) { String strObj = ( String ) str ; System . out . println ( strObj ); } if ( date instanceof Date ) { Date dateObj = ( Date ) date ; System . out . println ( dateObj ); } if ( employee instanceof Employee ) { Employee empObj = ( Employee ) employee ; System . out . println ( empObj . getName () + -- + empObj . getSalary ()); } ois . close (); } } //Javabean class Employee implements java . io . Serializable { private static final long serialVersionUID = 1208818830691668617L ; private transient String name ; //\u8be5\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316 private double salary ; public Employee () { } public Employee ( String name , double salary ) { this . name = name ; this . salary = salary ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public double getSalary () { return salary ; } public void setSalary ( double salary ) { this . salary = salary ; } }","title":"Object Stream"},{"location":"IO Streams/IO/IO/#random-access","text":"import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; import java.io.RandomAccessFile ; import java.io.SequenceInputStream ; import java.util.ArrayList ; import java.util.List ; import java.util.Vector ; public class SplitFile { //\u6e90\u5934 private File src ; //\u76ee\u7684\u5730(\u6587\u4ef6\u5939) private String destDir ; //\u6240\u6709\u5206\u5272\u540e\u7684\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 private List String destPaths ; //\u6bcf\u5757\u5927\u5c0f private int blockSize ; //\u5757\u6570: \u591a\u5c11\u5757 private int size ; public SplitFile ( String srcPath , String destDir ) { this ( srcPath , destDir , 1024 ); } public SplitFile ( String srcPath , String destDir , int blockSize ) { this . src = new File ( srcPath ); this . destDir = destDir ; this . blockSize = blockSize ; this . destPaths = new ArrayList String (); //\u521d\u59cb\u5316 init (); } //\u521d\u59cb\u5316 private void init () { //\u603b\u957f\u5ea6 long len = this . src . length (); //\u5757\u6570: \u591a\u5c11\u5757 this . size = ( int ) Math . ceil ( len * 1.0 / blockSize ); //\u8def\u5f84 for ( int i = 0 ; i size ; i ++) { this . destPaths . add ( this . destDir + / + i + - + this . src . getName ()); } } /** * \u5206\u5272 * 1\u3001\u8ba1\u7b97\u6bcf\u4e00\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u53ca\u5927\u5c0f * 2\u3001\u5206\u5272 * @throws IOException */ public void split () throws IOException { //\u603b\u957f\u5ea6 long len = src . length (); //\u8d77\u59cb\u4f4d\u7f6e\u548c\u5b9e\u9645\u5927\u5c0f int beginPos = 0 ; int actualSize = ( int )( blockSize len ? len : blockSize ); for ( int i = 0 ; i size ; i ++) { beginPos = i * blockSize ; if ( i == size - 1 ) { //\u6700\u540e\u4e00\u5757 actualSize = ( int ) len ; } else { actualSize = blockSize ; len -= actualSize ; //\u5269\u4f59\u91cf } splitDetail ( i , beginPos , actualSize ); } } /** * \u6307\u5b9a\u7b2ci\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e \u548c\u5b9e\u9645\u957f\u5ea6 * @param i * @param beginPos * @param actualSize * @throws IOException */ private void splitDetail ( int i , int beginPos , int actualSize ) throws IOException { RandomAccessFile raf = new RandomAccessFile ( this . src , r ); RandomAccessFile raf2 = new RandomAccessFile ( this . destPaths . get ( i ), rw ); //\u968f\u673a\u8bfb\u53d6 raf . seek ( beginPos ); //\u8bfb\u53d6 //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; //\u63a5\u6536\u957f\u5ea6 while (( len = raf . read ( flush )) != - 1 ) { if ( actualSize len ) { //\u83b7\u53d6\u672c\u6b21\u8bfb\u53d6\u7684\u6240\u6709\u5185\u5bb9 raf2 . write ( flush , 0 , len ); actualSize -= len ; } else { raf2 . write ( flush , 0 , actualSize ); break ; } } raf2 . close (); raf . close (); } /** * \u6587\u4ef6\u7684\u5408\u5e76 * @throws IOException */ public void merge ( String destPath ) throws IOException { //\u8f93\u51fa\u6d41 OutputStream os = new BufferedOutputStream ( new FileOutputStream ( destPath , true )); //\u8f93\u5165\u6d41 for ( int i = 0 ; i destPaths . size (); i ++) { InputStream is = new BufferedInputStream ( new FileInputStream ( destPaths . get ( i ))); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); is . close (); } os . close (); } public static void main ( String [] args ) throws IOException { SplitFile sf = new SplitFile ( src/main/java/basic/IO/Copy.java , src/images/ ) ; sf . split (); sf . merge ( src/images/merge01.java ); } }","title":"Random Access"},{"location":"IO Streams/IO/IO/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"IO Streams/IO/IO/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"Networking/Socket/Socket/","text":"Java Socket Overview API InetAddress.getLocalHost(): Returns the address of the local host. InetAddress.getByAddress(byte[] addr): Returns an InetAddress object given the raw IP address . InetAddress.getByName(String host): Determines the IP address of a host, given the host s name. getHostAddress(): Gets the host name for this IP address. getHostAddress(): Returns the IP address string in textual presentation. IP import java.net.InetAddress ; import java.net.UnknownHostException ; public class SocketDemo { public static void main ( String [] args ) throws UnknownHostException { // \u4f7f\u7528getLocalHost\u65b9\u6cd5\u521b\u5efaInetAddress\u5bf9\u8c61 \u672c\u673a InetAddress addr = InetAddress . getLocalHost (); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636e\u57df\u540d\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( www.baidu.com ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636eip\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( 104.193.88.77 ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u8f93\u51faip\u800c\u4e0d\u662f\u57df\u540d\u3002\u5982\u679c\u8fd9\u4e2aIP\u5730 \u5740\u4e0d\u5b58\u5728\u6216DNS\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u8fdb\u884cIP\u5730\u5740\u548c\u57df\u540d\u7684\u6620\u5c04\uff0c } } Port import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) { //\u5305\u542b\u7aef\u53e3 InetSocketAddress socketAddress = new InetSocketAddress ( 127.0.0.1 , 8080 ); InetSocketAddress socketAddress2 = new InetSocketAddress ( localhost , 9000 ); System . out . println ( socketAddress . getHostName ()); System . out . println ( socketAddress . getAddress ()); System . out . println ( socketAddress2 . getAddress ()); System . out . println ( socketAddress2 . getPort ()); } } URL import java.net.MalformedURLException ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws MalformedURLException { URL url = new URL ( http://www.baidu.com:80/index.html?uname=shsxt age=18#a ); // \u83b7\u53d6\u56db\u4e2a\u503c System . out . println ( \u534f\u8bae: + url . getProtocol ()); System . out . println ( \u57df\u540d|ip: + url . getHost ()); System . out . println ( \u7aef\u53e3: + url . getPort ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e901: + url . getFile ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e902: + url . getPath ()); // \u53c2\u6570 System . out . println ( \u53c2\u6570: + url . getQuery ()); // \u951a\u70b9 System . out . println ( \u951a\u70b9: + url . getRef ()); } } Spider import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStream ; import java.io.InputStreamReader ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws IOException { // \u83b7\u53d6URL URL url = new URL ( https://www.jd.com ); InputStream is = url . openStream (); BufferedReader br = new BufferedReader ( new InputStreamReader ( is , UTF-8 )); String msg = null ; while ( null != ( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); // \u5206\u6790 // \u5904\u7406\u3002\u3002\u3002\u3002 } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.net.HttpURLConnection ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws Exception { //\u83b7\u53d6URL URL url = new URL ( https://www.dianping.com ); //\u4e0b\u8f7d\u8d44\u6e90 HttpURLConnection conn =( HttpURLConnection ) url . openConnection (); conn . setRequestMethod ( GET ); conn . setRequestProperty ( User-Agent , Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36 ); BufferedReader br = new BufferedReader ( new InputStreamReader ( conn . getInputStream (), UTF-8 )); String msg = null ; while ( null !=( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); //\u5206\u6790 //\u5904\u7406\u3002\u3002\u3002\u3002 } } Send Data Package package networking.location ; import java.io.BufferedOutputStream ; import java.io.ByteArrayOutputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) throws IOException { System . out . println ( Sending data.... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); // 2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 // \u5199\u51fa ByteArrayOutputStream baos = new ByteArrayOutputStream (); DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( baos )); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e dos . writeUTF ( coding coding coding ); dos . writeInt ( 18 ); dos . writeBoolean ( false ); dos . writeChar ( a ); dos . flush (); byte [] datas = baos . toByteArray (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"Java Socket"},{"location":"Networking/Socket/Socket/#java-socket","text":"","title":"Java Socket"},{"location":"Networking/Socket/Socket/#overview","text":"API InetAddress.getLocalHost(): Returns the address of the local host. InetAddress.getByAddress(byte[] addr): Returns an InetAddress object given the raw IP address . InetAddress.getByName(String host): Determines the IP address of a host, given the host s name. getHostAddress(): Gets the host name for this IP address. getHostAddress(): Returns the IP address string in textual presentation.","title":"Overview"},{"location":"Networking/Socket/Socket/#ip","text":"import java.net.InetAddress ; import java.net.UnknownHostException ; public class SocketDemo { public static void main ( String [] args ) throws UnknownHostException { // \u4f7f\u7528getLocalHost\u65b9\u6cd5\u521b\u5efaInetAddress\u5bf9\u8c61 \u672c\u673a InetAddress addr = InetAddress . getLocalHost (); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636e\u57df\u540d\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( www.baidu.com ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636eip\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( 104.193.88.77 ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u8f93\u51faip\u800c\u4e0d\u662f\u57df\u540d\u3002\u5982\u679c\u8fd9\u4e2aIP\u5730 \u5740\u4e0d\u5b58\u5728\u6216DNS\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u8fdb\u884cIP\u5730\u5740\u548c\u57df\u540d\u7684\u6620\u5c04\uff0c } }","title":"IP"},{"location":"Networking/Socket/Socket/#port","text":"import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) { //\u5305\u542b\u7aef\u53e3 InetSocketAddress socketAddress = new InetSocketAddress ( 127.0.0.1 , 8080 ); InetSocketAddress socketAddress2 = new InetSocketAddress ( localhost , 9000 ); System . out . println ( socketAddress . getHostName ()); System . out . println ( socketAddress . getAddress ()); System . out . println ( socketAddress2 . getAddress ()); System . out . println ( socketAddress2 . getPort ()); } }","title":"Port"},{"location":"Networking/Socket/Socket/#url","text":"import java.net.MalformedURLException ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws MalformedURLException { URL url = new URL ( http://www.baidu.com:80/index.html?uname=shsxt age=18#a ); // \u83b7\u53d6\u56db\u4e2a\u503c System . out . println ( \u534f\u8bae: + url . getProtocol ()); System . out . println ( \u57df\u540d|ip: + url . getHost ()); System . out . println ( \u7aef\u53e3: + url . getPort ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e901: + url . getFile ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e902: + url . getPath ()); // \u53c2\u6570 System . out . println ( \u53c2\u6570: + url . getQuery ()); // \u951a\u70b9 System . out . println ( \u951a\u70b9: + url . getRef ()); } }","title":"URL"},{"location":"Networking/Socket/Socket/#spider","text":"import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStream ; import java.io.InputStreamReader ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws IOException { // \u83b7\u53d6URL URL url = new URL ( https://www.jd.com ); InputStream is = url . openStream (); BufferedReader br = new BufferedReader ( new InputStreamReader ( is , UTF-8 )); String msg = null ; while ( null != ( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); // \u5206\u6790 // \u5904\u7406\u3002\u3002\u3002\u3002 } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.net.HttpURLConnection ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws Exception { //\u83b7\u53d6URL URL url = new URL ( https://www.dianping.com ); //\u4e0b\u8f7d\u8d44\u6e90 HttpURLConnection conn =( HttpURLConnection ) url . openConnection (); conn . setRequestMethod ( GET ); conn . setRequestProperty ( User-Agent , Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36 ); BufferedReader br = new BufferedReader ( new InputStreamReader ( conn . getInputStream (), UTF-8 )); String msg = null ; while ( null !=( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); //\u5206\u6790 //\u5904\u7406\u3002\u3002\u3002\u3002 } }","title":"Spider"},{"location":"Networking/Socket/Socket/#send-data-package","text":"package networking.location ; import java.io.BufferedOutputStream ; import java.io.ByteArrayOutputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) throws IOException { System . out . println ( Sending data.... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); // 2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 // \u5199\u51fa ByteArrayOutputStream baos = new ByteArrayOutputStream (); DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( baos )); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e dos . writeUTF ( coding coding coding ); dos . writeInt ( 18 ); dos . writeBoolean ( false ); dos . writeChar ( a ); dos . flush (); byte [] datas = baos . toByteArray (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } }","title":"Send Data Package"},{"location":"Networking/Socket/Socket/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Networking/Socket/Socket/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"Networking/TCP/TCP/","text":"","title":"TCP"},{"location":"Networking/UDP/UDP/","text":"Java UDP Overview API IP import java.net.InetAddress ; import java.net.UnknownHostException ; public class SocketDemo { public static void main ( String [] args ) throws UnknownHostException { // \u4f7f\u7528getLocalHost\u65b9\u6cd5\u521b\u5efaInetAddress\u5bf9\u8c61 \u672c\u673a InetAddress addr = InetAddress . getLocalHost (); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636e\u57df\u540d\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( www.baidu.com ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636eip\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( 104.193.88.77 ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u8f93\u51faip\u800c\u4e0d\u662f\u57df\u540d\u3002\u5982\u679c\u8fd9\u4e2aIP\u5730 \u5740\u4e0d\u5b58\u5728\u6216DNS\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u8fdb\u884cIP\u5730\u5740\u548c\u57df\u540d\u7684\u6620\u5c04\uff0c } } Port import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) { //\u5305\u542b\u7aef\u53e3 InetSocketAddress socketAddress = new InetSocketAddress ( 127.0.0.1 , 8080 ); InetSocketAddress socketAddress2 = new InetSocketAddress ( localhost , 9000 ); System . out . println ( socketAddress . getHostName ()); System . out . println ( socketAddress . getAddress ()); System . out . println ( socketAddress2 . getAddress ()); System . out . println ( socketAddress2 . getPort ()); } } URL import java.net.MalformedURLException ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws MalformedURLException { URL url = new URL ( http://www.baidu.com:80/index.html?uname=shsxt age=18#a ); // \u83b7\u53d6\u56db\u4e2a\u503c System . out . println ( \u534f\u8bae: + url . getProtocol ()); System . out . println ( \u57df\u540d|ip: + url . getHost ()); System . out . println ( \u7aef\u53e3: + url . getPort ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e901: + url . getFile ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e902: + url . getPath ()); // \u53c2\u6570 System . out . println ( \u53c2\u6570: + url . getQuery ()); // \u951a\u70b9 System . out . println ( \u951a\u70b9: + url . getRef ()); } } Spider import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStream ; import java.io.InputStreamReader ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws IOException { // \u83b7\u53d6URL URL url = new URL ( https://www.jd.com ); InputStream is = url . openStream (); BufferedReader br = new BufferedReader ( new InputStreamReader ( is , UTF-8 )); String msg = null ; while ( null != ( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); // \u5206\u6790 // \u5904\u7406\u3002\u3002\u3002\u3002 } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.net.HttpURLConnection ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws Exception { //\u83b7\u53d6URL URL url = new URL ( https://www.dianping.com ); //\u4e0b\u8f7d\u8d44\u6e90 HttpURLConnection conn =( HttpURLConnection ) url . openConnection (); conn . setRequestMethod ( GET ); conn . setRequestProperty ( User-Agent , Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36 ); BufferedReader br = new BufferedReader ( new InputStreamReader ( conn . getInputStream (), UTF-8 )); String msg = null ; while ( null !=( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); //\u5206\u6790 //\u5904\u7406\u3002\u3002\u3002\u3002 } } Send Data Package package networking.location ; import java.io.BufferedOutputStream ; import java.io.ByteArrayOutputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) throws IOException { System . out . println ( Sending data.... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); // 2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 // \u5199\u51fa ByteArrayOutputStream baos = new ByteArrayOutputStream (); DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( baos )); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e dos . writeUTF ( coding coding coding ); dos . writeInt ( 18 ); dos . writeBoolean ( false ); dos . writeChar ( a ); dos . flush (); byte [] datas = baos . toByteArray (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"Java UDP"},{"location":"Networking/UDP/UDP/#java-udp","text":"","title":"Java UDP"},{"location":"Networking/UDP/UDP/#overview","text":"API","title":"Overview"},{"location":"Networking/UDP/UDP/#ip","text":"import java.net.InetAddress ; import java.net.UnknownHostException ; public class SocketDemo { public static void main ( String [] args ) throws UnknownHostException { // \u4f7f\u7528getLocalHost\u65b9\u6cd5\u521b\u5efaInetAddress\u5bf9\u8c61 \u672c\u673a InetAddress addr = InetAddress . getLocalHost (); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636e\u57df\u540d\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( www.baidu.com ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636eip\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( 104.193.88.77 ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u8f93\u51faip\u800c\u4e0d\u662f\u57df\u540d\u3002\u5982\u679c\u8fd9\u4e2aIP\u5730 \u5740\u4e0d\u5b58\u5728\u6216DNS\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u8fdb\u884cIP\u5730\u5740\u548c\u57df\u540d\u7684\u6620\u5c04\uff0c } }","title":"IP"},{"location":"Networking/UDP/UDP/#port","text":"import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) { //\u5305\u542b\u7aef\u53e3 InetSocketAddress socketAddress = new InetSocketAddress ( 127.0.0.1 , 8080 ); InetSocketAddress socketAddress2 = new InetSocketAddress ( localhost , 9000 ); System . out . println ( socketAddress . getHostName ()); System . out . println ( socketAddress . getAddress ()); System . out . println ( socketAddress2 . getAddress ()); System . out . println ( socketAddress2 . getPort ()); } }","title":"Port"},{"location":"Networking/UDP/UDP/#url","text":"import java.net.MalformedURLException ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws MalformedURLException { URL url = new URL ( http://www.baidu.com:80/index.html?uname=shsxt age=18#a ); // \u83b7\u53d6\u56db\u4e2a\u503c System . out . println ( \u534f\u8bae: + url . getProtocol ()); System . out . println ( \u57df\u540d|ip: + url . getHost ()); System . out . println ( \u7aef\u53e3: + url . getPort ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e901: + url . getFile ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e902: + url . getPath ()); // \u53c2\u6570 System . out . println ( \u53c2\u6570: + url . getQuery ()); // \u951a\u70b9 System . out . println ( \u951a\u70b9: + url . getRef ()); } }","title":"URL"},{"location":"Networking/UDP/UDP/#spider","text":"import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStream ; import java.io.InputStreamReader ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws IOException { // \u83b7\u53d6URL URL url = new URL ( https://www.jd.com ); InputStream is = url . openStream (); BufferedReader br = new BufferedReader ( new InputStreamReader ( is , UTF-8 )); String msg = null ; while ( null != ( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); // \u5206\u6790 // \u5904\u7406\u3002\u3002\u3002\u3002 } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.net.HttpURLConnection ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws Exception { //\u83b7\u53d6URL URL url = new URL ( https://www.dianping.com ); //\u4e0b\u8f7d\u8d44\u6e90 HttpURLConnection conn =( HttpURLConnection ) url . openConnection (); conn . setRequestMethod ( GET ); conn . setRequestProperty ( User-Agent , Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36 ); BufferedReader br = new BufferedReader ( new InputStreamReader ( conn . getInputStream (), UTF-8 )); String msg = null ; while ( null !=( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); //\u5206\u6790 //\u5904\u7406\u3002\u3002\u3002\u3002 } }","title":"Spider"},{"location":"Networking/UDP/UDP/#send-data-package","text":"package networking.location ; import java.io.BufferedOutputStream ; import java.io.ByteArrayOutputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) throws IOException { System . out . println ( Sending data.... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); // 2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 // \u5199\u51fa ByteArrayOutputStream baos = new ByteArrayOutputStream (); DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( baos )); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e dos . writeUTF ( coding coding coding ); dos . writeInt ( 18 ); dos . writeBoolean ( false ); dos . writeChar ( a ); dos . flush (); byte [] datas = baos . toByteArray (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } }","title":"Send Data Package"},{"location":"Networking/UDP/UDP/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Networking/UDP/UDP/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"}]}