{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Preface"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Annotation/Build-in/build_in_annotation/","text":"Java Build in Annotation Overview import java.util.ArrayList ; import java.util.Date ; import java.util.List ; public class AnnotationDemo { @Override public String toString () { return ; } @Deprecated public static void test001 () { System . out . println ( test001 ); } @SuppressWarnings ( all ) public static void test002 (){ List list = new ArrayList (); List list2 = new ArrayList (); } @SuppressWarnings ( all ) public static void main ( String [] args ) { Date d = new Date (); d . getDate (); test001 (); } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"1 Build in Annotation"},{"location":"Annotation/Build-in/build_in_annotation/#java-build-in-annotation","text":"","title":"Java Build in Annotation"},{"location":"Annotation/Build-in/build_in_annotation/#overview","text":"import java.util.ArrayList ; import java.util.Date ; import java.util.List ; public class AnnotationDemo { @Override public String toString () { return ; } @Deprecated public static void test001 () { System . out . println ( test001 ); } @SuppressWarnings ( all ) public static void test002 (){ List list = new ArrayList (); List list2 = new ArrayList (); } @SuppressWarnings ( all ) public static void main ( String [] args ) { Date d = new Date (); d . getDate (); test001 (); } }","title":"Overview"},{"location":"Annotation/Build-in/build_in_annotation/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Annotation/Build-in/build_in_annotation/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"Annotation/Custom/Custom_annotation/","text":"Java Build in Annotation Overview Information for the compiler: Annotations can be used by the compiler to detect errors or suppress warnings. Compile-time and deployment-time processing: Software tools can process annotation information to generate code, XML files, and so forth. Runtime processing: Some annotations are available to be examined at runtime. API meta annotation @Target @Retention @Documented @Inherited Target PACKAGE: package TYPE: class, interface, enumeration CONSTRUCTOR: METHOD: FIELD: LOCAL_VARABLE: Retention SOURCE: CLASS: RUNTIME: for reflection Target + Retention import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . METHOD , ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) public @interface AnnotationDemo { String studentName () default ; // \u53c2\u6570\u540d\uff0c\u53c2\u6570\u7c7b\u578b int age () default 0 ; int id () default - 1 ; //String indexOf( abc ) -1 String [] schools () default { school1 , school2 }; } import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . METHOD , ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) public @interface AnnotationDemo02 { String value (); } import java.util.ArrayList ; import java.util.Date ; import java.util.List ; @AnnotationDemo ( age = 19 , studentName = sname , id = 10001 , schools = { school1, school2 }) public class Demo { @Override @AnnotationDemo public String toString () { return ; } @AnnotationDemo02 ( value = aaaa ) public void test2 () { } @AnnotationDemo02 ( aaaa ) public void test3 () { } @Deprecated public static void test001 () { System . out . println ( test001 ); } @SuppressWarnings ( all ) public static void test002 () { List list = new ArrayList (); List list2 = new ArrayList (); } @SuppressWarnings ( all ) public static void main ( String [] args ) { Date d = new Date (); d . getDate (); test001 (); } } Reflection Annotation import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) public @interface Table { String value (); } import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . FIELD }) @Retention ( RetentionPolicy . RUNTIME ) public @interface Field { String columnName (); String type (); int length (); } package annotation ; @Table ( tb_student ) public class Student { @Field ( columnName = id , type = int , length = 10 ) private int id ; @Field ( columnName = studentName , type = String , length = 10 ) private String studentName ; @Field ( columnName = age , type = int , length = 3 ) private int age ; public SxtStudent () { } public SxtStudent ( int id , String studentName , int age ) { this . id = id ; this . studentName = studentName ; this . age = age ; } public int getId () { return id ; } public void setId ( int id ) { this . id = id ; } public String getStudentName () { return studentName ; } public void setStudentName ( String studentName ) { this . studentName = studentName ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } } import java.lang.annotation.Annotation ; import java.lang.reflect.Constructor ; import java.lang.reflect.Field ; import java.lang.reflect.InvocationTargetException ; import java.lang.reflect.Method ; public class Demo { /** * @param args * @throws SecurityException * @throws NoSuchFieldException * @throws NoSuchMethodException * @throws IllegalAccessException * @throws InstantiationException * @throws InvocationTargetException * @throws IllegalArgumentException */ @SuppressWarnings ( all ) public static void main ( String [] args ) throws NoSuchFieldException , SecurityException , NoSuchMethodException , InstantiationException , IllegalAccessException , IllegalArgumentException , InvocationTargetException { try { String path = annotation/Student ; Class clazz = Class . forName ( annotation.Student ); // \u83b7\u5f97\u540d\u5b57 System . out . println ( clazz . getName ()); // \u83b7\u5f97\u5305\u540d + \u7c7b\u540d System . out . println ( clazz . getSimpleName ()); // \u83b7\u5f97\u5305\u540d + \u7c7b\u540d // \u83b7\u5f97\u5c5e\u6027\u4fe1\u606f Field [] fields = clazz . getFields (); System . out . println ( fields . length ); Field [] private_and_all_fields = clazz . getDeclaredFields (); System . out . println ( private_and_all_fields . length ); for ( Field f : private_and_all_fields ) { System . out . print ( f . getName () + ); } System . out . print ( \\n ); Field f = clazz . getDeclaredField ( studentName ); System . out . println ( f . getName ()); // \u83b7\u5f97\u65b9\u6cd5 Method [] methods = clazz . getMethods (); for ( Method m : methods ) { System . out . print ( m . getName () + ); } System . out . print ( \\n ); Method m = clazz . getDeclaredMethod ( getId , null ); System . out . println ( m . getName ()); m = clazz . getDeclaredMethod ( setId , int . class ); // \u5982\u679c\u65b9\u6cd5\u6709\u53c2\u6570\uff0c\u5fc5\u987b\u4f20\u53c2\u6570\u7c7b\u578b System . out . println ( m . getName ()); // \u83b7\u5f97\u6784\u9020\u5668\u4fe1\u606f Constructor [] cons = clazz . getDeclaredConstructors (); for ( Constructor c : cons ) { System . out . println ( \u6784\u9020\u5668: + c . getName () + ); } Constructor c = clazz . getDeclaredConstructor ( null ); System . out . println ( \u6784\u9020\u5668: + c . getName () + ); c = clazz . getDeclaredConstructor ( int . class , String . class , int . class ); System . out . println ( \u6784\u9020\u5668: + c . getName () + ); clazz = Class . forName ( annotation.Student ); Student stu = ( Student ) clazz . newInstance (); // \u5176\u5b9e\u8c03\u7528\u7684\u65e0\u53c2\u7684\u6784\u9020\u5668 System . out . println ( stu ); Constructor Student cstu = clazz . getConstructor ( int . class , String . class , int . class ); stu = cstu . newInstance ( 100 , \u5475\u5475 , 28 ); System . out . println ( stu ); // \u53cd\u5c04\u65b9\u6cd5 Method method = clazz . getDeclaredMethod ( setId , int . class ); method . invoke ( stu , 98 ); System . out . println ( stu . getId ()); // \u53cd\u5c04API\u64cd\u4f5c\u5c5e\u6027 Field field = clazz . getDeclaredField ( studentName ); field . setAccessible ( true ); field . set ( stu , \u74e6\u54c8\u554a\u54c8 ); System . out . println ( stu . getStudentName ()); Annotation [] annotations = clazz . getAnnotations (); for ( Annotation a : annotations ) { System . out . println ( a ); } Table st = ( Table ) clazz . getAnnotation ( Table . class ); System . out . println ( st . value ()); Field f0 = clazz . getDeclaredField ( studentName ); Field sfield = f0 . getAnnotation ( Field . class ); System . out . println ( sfield . columnName () + -- + sfield . type () + -- + sfield . length ()); // Jvm \u521b\u5efa\u4e00\u4e2aClas\u5bf9\u8c61 System . out . println ( clazz ); System . out . println ( clazz . hashCode ()); Class clazz2 = Class . forName ( annotation.SxtStudent ); System . out . println ( clazz2 ); System . out . println ( clazz2 . hashCode ()); // Jvm \u521b\u5efa\u4e00\u4e2aClas\u5bf9\u8c61 Class strClass = String . class ; Class strClass2 = path . getClass (); System . out . println ( strClass . hashCode ()); System . out . println ( strClass2 . hashCode ()); } catch ( ClassNotFoundException e ) { e . printStackTrace (); } } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"2 Custome Annotation"},{"location":"Annotation/Custom/Custom_annotation/#java-build-in-annotation","text":"","title":"Java Build in Annotation"},{"location":"Annotation/Custom/Custom_annotation/#overview","text":"Information for the compiler: Annotations can be used by the compiler to detect errors or suppress warnings. Compile-time and deployment-time processing: Software tools can process annotation information to generate code, XML files, and so forth. Runtime processing: Some annotations are available to be examined at runtime.","title":"Overview"},{"location":"Annotation/Custom/Custom_annotation/#api","text":"meta annotation @Target @Retention @Documented @Inherited Target PACKAGE: package TYPE: class, interface, enumeration CONSTRUCTOR: METHOD: FIELD: LOCAL_VARABLE: Retention SOURCE: CLASS: RUNTIME: for reflection","title":"API"},{"location":"Annotation/Custom/Custom_annotation/#target-retention","text":"import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . METHOD , ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) public @interface AnnotationDemo { String studentName () default ; // \u53c2\u6570\u540d\uff0c\u53c2\u6570\u7c7b\u578b int age () default 0 ; int id () default - 1 ; //String indexOf( abc ) -1 String [] schools () default { school1 , school2 }; } import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . METHOD , ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) public @interface AnnotationDemo02 { String value (); } import java.util.ArrayList ; import java.util.Date ; import java.util.List ; @AnnotationDemo ( age = 19 , studentName = sname , id = 10001 , schools = { school1, school2 }) public class Demo { @Override @AnnotationDemo public String toString () { return ; } @AnnotationDemo02 ( value = aaaa ) public void test2 () { } @AnnotationDemo02 ( aaaa ) public void test3 () { } @Deprecated public static void test001 () { System . out . println ( test001 ); } @SuppressWarnings ( all ) public static void test002 () { List list = new ArrayList (); List list2 = new ArrayList (); } @SuppressWarnings ( all ) public static void main ( String [] args ) { Date d = new Date (); d . getDate (); test001 (); } }","title":"Target + Retention"},{"location":"Annotation/Custom/Custom_annotation/#reflection-annotation","text":"import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . TYPE }) @Retention ( RetentionPolicy . RUNTIME ) public @interface Table { String value (); } import java.lang.annotation.ElementType ; import java.lang.annotation.Retention ; import java.lang.annotation.RetentionPolicy ; import java.lang.annotation.Target ; @Target ( value = { ElementType . FIELD }) @Retention ( RetentionPolicy . RUNTIME ) public @interface Field { String columnName (); String type (); int length (); } package annotation ; @Table ( tb_student ) public class Student { @Field ( columnName = id , type = int , length = 10 ) private int id ; @Field ( columnName = studentName , type = String , length = 10 ) private String studentName ; @Field ( columnName = age , type = int , length = 3 ) private int age ; public SxtStudent () { } public SxtStudent ( int id , String studentName , int age ) { this . id = id ; this . studentName = studentName ; this . age = age ; } public int getId () { return id ; } public void setId ( int id ) { this . id = id ; } public String getStudentName () { return studentName ; } public void setStudentName ( String studentName ) { this . studentName = studentName ; } public int getAge () { return age ; } public void setAge ( int age ) { this . age = age ; } } import java.lang.annotation.Annotation ; import java.lang.reflect.Constructor ; import java.lang.reflect.Field ; import java.lang.reflect.InvocationTargetException ; import java.lang.reflect.Method ; public class Demo { /** * @param args * @throws SecurityException * @throws NoSuchFieldException * @throws NoSuchMethodException * @throws IllegalAccessException * @throws InstantiationException * @throws InvocationTargetException * @throws IllegalArgumentException */ @SuppressWarnings ( all ) public static void main ( String [] args ) throws NoSuchFieldException , SecurityException , NoSuchMethodException , InstantiationException , IllegalAccessException , IllegalArgumentException , InvocationTargetException { try { String path = annotation/Student ; Class clazz = Class . forName ( annotation.Student ); // \u83b7\u5f97\u540d\u5b57 System . out . println ( clazz . getName ()); // \u83b7\u5f97\u5305\u540d + \u7c7b\u540d System . out . println ( clazz . getSimpleName ()); // \u83b7\u5f97\u5305\u540d + \u7c7b\u540d // \u83b7\u5f97\u5c5e\u6027\u4fe1\u606f Field [] fields = clazz . getFields (); System . out . println ( fields . length ); Field [] private_and_all_fields = clazz . getDeclaredFields (); System . out . println ( private_and_all_fields . length ); for ( Field f : private_and_all_fields ) { System . out . print ( f . getName () + ); } System . out . print ( \\n ); Field f = clazz . getDeclaredField ( studentName ); System . out . println ( f . getName ()); // \u83b7\u5f97\u65b9\u6cd5 Method [] methods = clazz . getMethods (); for ( Method m : methods ) { System . out . print ( m . getName () + ); } System . out . print ( \\n ); Method m = clazz . getDeclaredMethod ( getId , null ); System . out . println ( m . getName ()); m = clazz . getDeclaredMethod ( setId , int . class ); // \u5982\u679c\u65b9\u6cd5\u6709\u53c2\u6570\uff0c\u5fc5\u987b\u4f20\u53c2\u6570\u7c7b\u578b System . out . println ( m . getName ()); // \u83b7\u5f97\u6784\u9020\u5668\u4fe1\u606f Constructor [] cons = clazz . getDeclaredConstructors (); for ( Constructor c : cons ) { System . out . println ( \u6784\u9020\u5668: + c . getName () + ); } Constructor c = clazz . getDeclaredConstructor ( null ); System . out . println ( \u6784\u9020\u5668: + c . getName () + ); c = clazz . getDeclaredConstructor ( int . class , String . class , int . class ); System . out . println ( \u6784\u9020\u5668: + c . getName () + ); clazz = Class . forName ( annotation.Student ); Student stu = ( Student ) clazz . newInstance (); // \u5176\u5b9e\u8c03\u7528\u7684\u65e0\u53c2\u7684\u6784\u9020\u5668 System . out . println ( stu ); Constructor Student cstu = clazz . getConstructor ( int . class , String . class , int . class ); stu = cstu . newInstance ( 100 , \u5475\u5475 , 28 ); System . out . println ( stu ); // \u53cd\u5c04\u65b9\u6cd5 Method method = clazz . getDeclaredMethod ( setId , int . class ); method . invoke ( stu , 98 ); System . out . println ( stu . getId ()); // \u53cd\u5c04API\u64cd\u4f5c\u5c5e\u6027 Field field = clazz . getDeclaredField ( studentName ); field . setAccessible ( true ); field . set ( stu , \u74e6\u54c8\u554a\u54c8 ); System . out . println ( stu . getStudentName ()); Annotation [] annotations = clazz . getAnnotations (); for ( Annotation a : annotations ) { System . out . println ( a ); } Table st = ( Table ) clazz . getAnnotation ( Table . class ); System . out . println ( st . value ()); Field f0 = clazz . getDeclaredField ( studentName ); Field sfield = f0 . getAnnotation ( Field . class ); System . out . println ( sfield . columnName () + -- + sfield . type () + -- + sfield . length ()); // Jvm \u521b\u5efa\u4e00\u4e2aClas\u5bf9\u8c61 System . out . println ( clazz ); System . out . println ( clazz . hashCode ()); Class clazz2 = Class . forName ( annotation.SxtStudent ); System . out . println ( clazz2 ); System . out . println ( clazz2 . hashCode ()); // Jvm \u521b\u5efa\u4e00\u4e2aClas\u5bf9\u8c61 Class strClass = String . class ; Class strClass2 = path . getClass (); System . out . println ( strClass . hashCode ()); System . out . println ( strClass2 . hashCode ()); } catch ( ClassNotFoundException e ) { e . printStackTrace (); } } }","title":"Reflection Annotation"},{"location":"Annotation/Custom/Custom_annotation/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Annotation/Custom/Custom_annotation/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"IO Streams/File/File/","text":"File The File class from the java.io package, allows us to work with files. To use the File class, create an object of the class, and specify the filename or directory name API Contructors File(String parent,String child) File(File parent, String child) File(String name) File Path File.separator: Platform dependent default name-separator character as String. For windows, it\u2019s \u2018\\\u2019 and for unix it\u2019s \u2018/\u2019. File.separatorChar: Same as separator but it\u2019s char. File.pathSeparator: Platform dependent variable for path-separator. For example PATH or CLASSPATH variable list of paths separated by \u2018:\u2019 in Unix systems and \u2018;\u2019 in Windows system. File.pathSeparatorChar: Same as pathSeparator but it\u2019s char. getName(): Returns the name of the file or directory denoted by this abstract pathname. getPath(): Converts this abstract pathname into a pathname string. getAbsolutePath(): Returns the absolute pathname string of this abstract pathname. getParent(): Returns the pathname string of this abstract pathname s parent, or null if this pathname does not name a parent directory. File Status exists(): Tests whether the file or directory denoted by this abstract pathname exists. isFile(): Tests whether the file denoted by this abstract pathname is a normal file. isDirectory(): Tests whether the file denoted by this abstract pathname is a directory. length(): Returns the length of the file denoted by this abstract pathname. T Create File createNewFile(): Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist delete(): Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. mkdir(): Creates the directory named by this abstract pathname. mkdirs(): Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. List File list(): Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. listFiles(): Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. listRoots(): List the available filesystem roots. File Path import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = D:\\\\java\\\\IO\\\\IO.png ; System . out . println ( File . separator ); path = D:/java/IO/IO.png ; path = D: + File . separator + java + File . separator + IO + File . separator + IO.png ; System . out . println ( path ); path = src/images/ball.png ; File src = new File ( path ); System . out . println ( src . length ()); System . out . println ( src . getAbsolutePath ()); System . out . println ( System . getProperty ( user.dir )); src = new File ( src/images/ , ball.png ); System . out . println ( src . length ()); src = new File ( new File ( src/images/ ), ball.png ); System . out . println ( src . length ()); System . out . println ( name: + src . getName ()); System . out . println ( path: + src . getPath ()); System . out . println ( absolute path: + src . getAbsolutePath ()); System . out . println ( parent path: + src . getParent ()); } } File Status import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = src/images/ball.png ; File src = new File ( path ); System . out . println ( exist: + src . exists ()); System . out . println ( is file: + src . isFile ()); System . out . println ( is directory: + src . isDirectory ()); System . out . println ( src . length ()); } } Create File import java.io.File ; public class FileDemo { public static void main ( String [] args ) throws IOException { File src = new File ( src/images/io.txt ); boolean flag = src . createNewFile (); System . out . println ( create new file: + flag ); flag = src . delete (); System . out . println ( delete new file: + flag ); File dir = new File ( src/images/dirs/dir ); flag = dir . mkdir (); System . out . println ( flag: + flag ); flag = dir . mkdirs (); System . out . println ( flag: + flag ); } } List File import java.io.File ; public class FileDemo { static int len = 0 ; public static void main ( String [] args ) throws IOException { File dir = new File ( src ); String [] subList = dir . list (); for ( String s : subList ) { System . out . println ( s: + s ); } File [] subFile = dir . listFiles (); for ( File f : subFile ) { System . out . println ( f . getAbsolutePath ()); } File [] roots = File . listRoots (); for ( File f : roots ) { System . out . println ( f . getAbsolutePath ()); } System . out . println ( count ( src )); } public static int count ( File src ) { if ( null == src || ! src . exists ()) return 0 ; for ( File f : src . listFiles ()) { if ( f . isFile ()) { len += f . length (); } else { len += count ( f ); } } return len ; } } Authors Weiduo Sun License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"1 File"},{"location":"IO Streams/File/File/#file","text":"The File class from the java.io package, allows us to work with files. To use the File class, create an object of the class, and specify the filename or directory name","title":"File"},{"location":"IO Streams/File/File/#api","text":"Contructors File(String parent,String child) File(File parent, String child) File(String name) File Path File.separator: Platform dependent default name-separator character as String. For windows, it\u2019s \u2018\\\u2019 and for unix it\u2019s \u2018/\u2019. File.separatorChar: Same as separator but it\u2019s char. File.pathSeparator: Platform dependent variable for path-separator. For example PATH or CLASSPATH variable list of paths separated by \u2018:\u2019 in Unix systems and \u2018;\u2019 in Windows system. File.pathSeparatorChar: Same as pathSeparator but it\u2019s char. getName(): Returns the name of the file or directory denoted by this abstract pathname. getPath(): Converts this abstract pathname into a pathname string. getAbsolutePath(): Returns the absolute pathname string of this abstract pathname. getParent(): Returns the pathname string of this abstract pathname s parent, or null if this pathname does not name a parent directory. File Status exists(): Tests whether the file or directory denoted by this abstract pathname exists. isFile(): Tests whether the file denoted by this abstract pathname is a normal file. isDirectory(): Tests whether the file denoted by this abstract pathname is a directory. length(): Returns the length of the file denoted by this abstract pathname. T Create File createNewFile(): Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist delete(): Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. mkdir(): Creates the directory named by this abstract pathname. mkdirs(): Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. List File list(): Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. listFiles(): Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. listRoots(): List the available filesystem roots.","title":"API"},{"location":"IO Streams/File/File/#file-path","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = D:\\\\java\\\\IO\\\\IO.png ; System . out . println ( File . separator ); path = D:/java/IO/IO.png ; path = D: + File . separator + java + File . separator + IO + File . separator + IO.png ; System . out . println ( path ); path = src/images/ball.png ; File src = new File ( path ); System . out . println ( src . length ()); System . out . println ( src . getAbsolutePath ()); System . out . println ( System . getProperty ( user.dir )); src = new File ( src/images/ , ball.png ); System . out . println ( src . length ()); src = new File ( new File ( src/images/ ), ball.png ); System . out . println ( src . length ()); System . out . println ( name: + src . getName ()); System . out . println ( path: + src . getPath ()); System . out . println ( absolute path: + src . getAbsolutePath ()); System . out . println ( parent path: + src . getParent ()); } }","title":"File Path"},{"location":"IO Streams/File/File/#file-status","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) { String path = src/images/ball.png ; File src = new File ( path ); System . out . println ( exist: + src . exists ()); System . out . println ( is file: + src . isFile ()); System . out . println ( is directory: + src . isDirectory ()); System . out . println ( src . length ()); } }","title":"File Status"},{"location":"IO Streams/File/File/#create-file","text":"import java.io.File ; public class FileDemo { public static void main ( String [] args ) throws IOException { File src = new File ( src/images/io.txt ); boolean flag = src . createNewFile (); System . out . println ( create new file: + flag ); flag = src . delete (); System . out . println ( delete new file: + flag ); File dir = new File ( src/images/dirs/dir ); flag = dir . mkdir (); System . out . println ( flag: + flag ); flag = dir . mkdirs (); System . out . println ( flag: + flag ); } }","title":"Create File"},{"location":"IO Streams/File/File/#list-file","text":"import java.io.File ; public class FileDemo { static int len = 0 ; public static void main ( String [] args ) throws IOException { File dir = new File ( src ); String [] subList = dir . list (); for ( String s : subList ) { System . out . println ( s: + s ); } File [] subFile = dir . listFiles (); for ( File f : subFile ) { System . out . println ( f . getAbsolutePath ()); } File [] roots = File . listRoots (); for ( File f : roots ) { System . out . println ( f . getAbsolutePath ()); } System . out . println ( count ( src )); } public static int count ( File src ) { if ( null == src || ! src . exists ()) return 0 ; for ( File f : src . listFiles ()) { if ( f . isFile ()) { len += f . length (); } else { len += count ( f ); } } return len ; } }","title":"List File"},{"location":"IO Streams/File/File/#authors","text":"Weiduo Sun","title":"Authors"},{"location":"IO Streams/File/File/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"IO Streams/IO/IO/","text":"Java I/O Overview InputStream: Abstract class ByteArrayInputStream\u3001StringBufferInputStream(StreamBufferInputStream)\u3001FileInputStream: read from Byte array,StringBuffer and local file PipedInputStream: read from multiple shared threads ObjectInputStream: FilterInputStream s sub class OutputStream: Abstract class ByteArrayOutputStream\u3001FileOutputStream: write into Byte array,StringBuffer and local file PipedInputStream: write into multiple shared threads ObjectOutputStream: FilterInputStream s sub class Byte Stream import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileInputStream in = null ; FileOutputStream out = null ; try { in = new FileInputStream ( src ); out = new FileOutputStream ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Character Streams import java.io.File ; import java.io.FileNotFoundException ; import java.io.FileReader ; import java.io.FileWriter ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileReader in = null ; FileWriter out = null ; try { in = new FileReader ( src ); out = new FileWriter ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Byte Array input import java.io.ByteArrayInputStream ; import java.io.IOException ; import java.io.InputStream ; public class IODemo { public static void main ( String [] args ) { byte [] src = hello world! . getBytes (); InputStream in = null ; try { in = new ByteArrayInputStream ( src ); byte [] flush = new byte [ 5 ]; int len ; while (( len = in . read ()) != - 1 ) { String str = new String ( flush , 0 , len ); System . out . println ( str ); } } catch ( IOException e ) { e . printStackTrace (); } finally { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } Byte Array Stream import java.io.ByteArrayInputStream ; import java.io.ByteArrayOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { byte [] datas = fileToByteArray ( src/images/p.png ); System . out . println ( datas . length ); byteArrayToFile ( datas , src/images/p-byte.png ); } public static byte [] fileToByteArray ( String filePath ) { File src = new File ( filePath ); byte [] dest = null ; InputStream is = null ; ByteArrayOutputStream baos = null ; try { is = new FileInputStream ( src ); baos = new ByteArrayOutputStream (); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { baos . write ( flush , 0 , len ); } baos . flush (); dest = baos . toByteArray (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } } return dest ; } public static void byteArrayToFile ( byte [] src , String filePath ) { File dest = new File ( filePath ); InputStream is = null ; OutputStream os = null ; try { is = new ByteArrayInputStream ( src ); os = new FileOutputStream ( dest ); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } if ( null != os ) { try { os . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } } Buffer Stream import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { long t1 = System . currentTimeMillis (); copy ( src/images/IO.mp4 , src/images/IO-copy.mp4 ); long t2 = System . currentTimeMillis (); System . out . println ( t2 - t1 ); } public static void copy ( String srcPath , String destPath ) { //1\u3001\u521b\u5efa\u6e90 File src = new File ( srcPath ); //\u6e90\u5934 File dest = new File ( destPath ); //\u76ee\u7684\u5730 //2\u3001\u9009\u62e9\u6d41 try ( InputStream is = new BufferedInputStream ( new FileInputStream ( src )); OutputStream os = new BufferedOutputStream ( new FileOutputStream ( dest ));) { //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; while (( len = is . read ( flush ))! = - 1 ) { os . write ( flush , 0 , len ); //\u5206\u6bb5\u5199\u51fa } os . flush (); } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } } } Object Stream import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.ObjectInputStream ; import java.io.ObjectOutputStream ; import java.util.Date ; public class IODemo { public static void main ( String [] args ) throws FileNotFoundException , IOException , ClassNotFoundException { // \u5199\u51fa -- \u5e8f\u5217\u5316 ObjectOutputStream oos = new ObjectOutputStream ( new BufferedOutputStream ( new FileOutputStream ( src/images/obj.ser ))); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e oos . writeUTF ( coding ); oos . writeInt ( 18 ); oos . writeBoolean ( false ); oos . writeChar ( a ); // \u5bf9\u8c61 oos . writeObject ( string ); oos . writeObject ( new Date ()); Employee emp = new Employee ( Jim , 400 ); oos . writeObject ( emp ); oos . flush (); oos . close (); // \u8bfb\u53d6 -- \u53cd\u5e8f\u5217\u5316 ObjectInputStream ois = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( obj.ser ))); // \u987a\u5e8f\u4e0e\u5199\u51fa\u4e00\u81f4 String msg = ois . readUTF (); int age = ois . readInt (); boolean flag = ois . readBoolean (); char ch = ois . readChar (); System . out . println ( msg ); System . out . println ( age ); System . out . println ( flag ); System . out . println ( ch ); // \u5bf9\u8c61\u7684\u6570\u636e\u8fd8\u539f Object str = ois . readObject (); Object date = ois . readObject (); Object employee = ois . readObject (); if ( str instanceof String ) { String strObj = ( String ) str ; System . out . println ( strObj ); } if ( date instanceof Date ) { Date dateObj = ( Date ) date ; System . out . println ( dateObj ); } if ( employee instanceof Employee ) { Employee empObj = ( Employee ) employee ; System . out . println ( empObj . getName () + -- + empObj . getSalary ()); } ois . close (); } } //Javabean class Employee implements java . io . Serializable { private static final long serialVersionUID = 1208818830691668617L ; private transient String name ; //\u8be5\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316 private double salary ; public Employee () { } public Employee ( String name , double salary ) { this . name = name ; this . salary = salary ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public double getSalary () { return salary ; } public void setSalary ( double salary ) { this . salary = salary ; } } Random Access import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; import java.io.RandomAccessFile ; import java.io.SequenceInputStream ; import java.util.ArrayList ; import java.util.List ; import java.util.Vector ; public class SplitFile { //\u6e90\u5934 private File src ; //\u76ee\u7684\u5730(\u6587\u4ef6\u5939) private String destDir ; //\u6240\u6709\u5206\u5272\u540e\u7684\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 private List String destPaths ; //\u6bcf\u5757\u5927\u5c0f private int blockSize ; //\u5757\u6570: \u591a\u5c11\u5757 private int size ; public SplitFile ( String srcPath , String destDir ) { this ( srcPath , destDir , 1024 ); } public SplitFile ( String srcPath , String destDir , int blockSize ) { this . src = new File ( srcPath ); this . destDir = destDir ; this . blockSize = blockSize ; this . destPaths = new ArrayList String (); //\u521d\u59cb\u5316 init (); } //\u521d\u59cb\u5316 private void init () { //\u603b\u957f\u5ea6 long len = this . src . length (); //\u5757\u6570: \u591a\u5c11\u5757 this . size = ( int ) Math . ceil ( len * 1.0 / blockSize ); //\u8def\u5f84 for ( int i = 0 ; i size ; i ++) { this . destPaths . add ( this . destDir + / + i + - + this . src . getName ()); } } /** * \u5206\u5272 * 1\u3001\u8ba1\u7b97\u6bcf\u4e00\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u53ca\u5927\u5c0f * 2\u3001\u5206\u5272 * @throws IOException */ public void split () throws IOException { //\u603b\u957f\u5ea6 long len = src . length (); //\u8d77\u59cb\u4f4d\u7f6e\u548c\u5b9e\u9645\u5927\u5c0f int beginPos = 0 ; int actualSize = ( int )( blockSize len ? len : blockSize ); for ( int i = 0 ; i size ; i ++) { beginPos = i * blockSize ; if ( i == size - 1 ) { //\u6700\u540e\u4e00\u5757 actualSize = ( int ) len ; } else { actualSize = blockSize ; len -= actualSize ; //\u5269\u4f59\u91cf } splitDetail ( i , beginPos , actualSize ); } } /** * \u6307\u5b9a\u7b2ci\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e \u548c\u5b9e\u9645\u957f\u5ea6 * @param i * @param beginPos * @param actualSize * @throws IOException */ private void splitDetail ( int i , int beginPos , int actualSize ) throws IOException { RandomAccessFile raf = new RandomAccessFile ( this . src , r ); RandomAccessFile raf2 = new RandomAccessFile ( this . destPaths . get ( i ), rw ); //\u968f\u673a\u8bfb\u53d6 raf . seek ( beginPos ); //\u8bfb\u53d6 //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; //\u63a5\u6536\u957f\u5ea6 while (( len = raf . read ( flush )) != - 1 ) { if ( actualSize len ) { //\u83b7\u53d6\u672c\u6b21\u8bfb\u53d6\u7684\u6240\u6709\u5185\u5bb9 raf2 . write ( flush , 0 , len ); actualSize -= len ; } else { raf2 . write ( flush , 0 , actualSize ); break ; } } raf2 . close (); raf . close (); } /** * \u6587\u4ef6\u7684\u5408\u5e76 * @throws IOException */ public void merge ( String destPath ) throws IOException { //\u8f93\u51fa\u6d41 OutputStream os = new BufferedOutputStream ( new FileOutputStream ( destPath , true )); //\u8f93\u5165\u6d41 for ( int i = 0 ; i destPaths . size (); i ++) { InputStream is = new BufferedInputStream ( new FileInputStream ( destPaths . get ( i ))); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); is . close (); } os . close (); } public static void main ( String [] args ) throws IOException { SplitFile sf = new SplitFile ( src/main/java/basic/IO/Copy.java , src/images/ ) ; sf . split (); sf . merge ( src/images/merge01.java ); } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"2 IO"},{"location":"IO Streams/IO/IO/#java-io","text":"","title":"Java I/O"},{"location":"IO Streams/IO/IO/#overview","text":"InputStream: Abstract class ByteArrayInputStream\u3001StringBufferInputStream(StreamBufferInputStream)\u3001FileInputStream: read from Byte array,StringBuffer and local file PipedInputStream: read from multiple shared threads ObjectInputStream: FilterInputStream s sub class OutputStream: Abstract class ByteArrayOutputStream\u3001FileOutputStream: write into Byte array,StringBuffer and local file PipedInputStream: write into multiple shared threads ObjectOutputStream: FilterInputStream s sub class","title":"Overview"},{"location":"IO Streams/IO/IO/#byte-stream","text":"import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileInputStream in = null ; FileOutputStream out = null ; try { in = new FileInputStream ( src ); out = new FileOutputStream ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Byte Stream"},{"location":"IO Streams/IO/IO/#character-streams","text":"import java.io.File ; import java.io.FileNotFoundException ; import java.io.FileReader ; import java.io.FileWriter ; import java.io.IOException ; public class IODemo { public static void main ( String [] args ) { File src = new File ( src/images/abc.txt ); File dest = new File ( src/images/abc_out.txt ); FileReader in = null ; FileWriter out = null ; try { in = new FileReader ( src ); out = new FileWriter ( dest ); int c ; while (( c = in . read ()) != - 1 ) { out . write ( c ); } } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } finally { if ( in != null ) { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } if ( out != null ) { try { out . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Character Streams"},{"location":"IO Streams/IO/IO/#byte-array-input","text":"import java.io.ByteArrayInputStream ; import java.io.IOException ; import java.io.InputStream ; public class IODemo { public static void main ( String [] args ) { byte [] src = hello world! . getBytes (); InputStream in = null ; try { in = new ByteArrayInputStream ( src ); byte [] flush = new byte [ 5 ]; int len ; while (( len = in . read ()) != - 1 ) { String str = new String ( flush , 0 , len ); System . out . println ( str ); } } catch ( IOException e ) { e . printStackTrace (); } finally { try { in . close (); } catch ( IOException e ) { e . printStackTrace (); } } } }","title":"Byte Array input"},{"location":"IO Streams/IO/IO/#byte-array-stream","text":"import java.io.ByteArrayInputStream ; import java.io.ByteArrayOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { byte [] datas = fileToByteArray ( src/images/p.png ); System . out . println ( datas . length ); byteArrayToFile ( datas , src/images/p-byte.png ); } public static byte [] fileToByteArray ( String filePath ) { File src = new File ( filePath ); byte [] dest = null ; InputStream is = null ; ByteArrayOutputStream baos = null ; try { is = new FileInputStream ( src ); baos = new ByteArrayOutputStream (); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { baos . write ( flush , 0 , len ); } baos . flush (); dest = baos . toByteArray (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } } return dest ; } public static void byteArrayToFile ( byte [] src , String filePath ) { File dest = new File ( filePath ); InputStream is = null ; OutputStream os = null ; try { is = new ByteArrayInputStream ( src ); os = new FileOutputStream ( dest ); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); } catch ( IOException e ) { e . printStackTrace (); } finally { try { is . close (); } catch ( IOException e ) { e . printStackTrace (); } if ( null != os ) { try { os . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } }","title":"Byte Array Stream"},{"location":"IO Streams/IO/IO/#buffer-stream","text":"import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; public class IODemo { public static void main ( String [] args ) { long t1 = System . currentTimeMillis (); copy ( src/images/IO.mp4 , src/images/IO-copy.mp4 ); long t2 = System . currentTimeMillis (); System . out . println ( t2 - t1 ); } public static void copy ( String srcPath , String destPath ) { //1\u3001\u521b\u5efa\u6e90 File src = new File ( srcPath ); //\u6e90\u5934 File dest = new File ( destPath ); //\u76ee\u7684\u5730 //2\u3001\u9009\u62e9\u6d41 try ( InputStream is = new BufferedInputStream ( new FileInputStream ( src )); OutputStream os = new BufferedOutputStream ( new FileOutputStream ( dest ));) { //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; while (( len = is . read ( flush ))! = - 1 ) { os . write ( flush , 0 , len ); //\u5206\u6bb5\u5199\u51fa } os . flush (); } catch ( FileNotFoundException e ) { e . printStackTrace (); } catch ( IOException e ) { e . printStackTrace (); } } }","title":"Buffer Stream"},{"location":"IO Streams/IO/IO/#object-stream","text":"import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.FileInputStream ; import java.io.FileNotFoundException ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.ObjectInputStream ; import java.io.ObjectOutputStream ; import java.util.Date ; public class IODemo { public static void main ( String [] args ) throws FileNotFoundException , IOException , ClassNotFoundException { // \u5199\u51fa -- \u5e8f\u5217\u5316 ObjectOutputStream oos = new ObjectOutputStream ( new BufferedOutputStream ( new FileOutputStream ( src/images/obj.ser ))); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e oos . writeUTF ( coding ); oos . writeInt ( 18 ); oos . writeBoolean ( false ); oos . writeChar ( a ); // \u5bf9\u8c61 oos . writeObject ( string ); oos . writeObject ( new Date ()); Employee emp = new Employee ( Jim , 400 ); oos . writeObject ( emp ); oos . flush (); oos . close (); // \u8bfb\u53d6 -- \u53cd\u5e8f\u5217\u5316 ObjectInputStream ois = new ObjectInputStream ( new BufferedInputStream ( new FileInputStream ( obj.ser ))); // \u987a\u5e8f\u4e0e\u5199\u51fa\u4e00\u81f4 String msg = ois . readUTF (); int age = ois . readInt (); boolean flag = ois . readBoolean (); char ch = ois . readChar (); System . out . println ( msg ); System . out . println ( age ); System . out . println ( flag ); System . out . println ( ch ); // \u5bf9\u8c61\u7684\u6570\u636e\u8fd8\u539f Object str = ois . readObject (); Object date = ois . readObject (); Object employee = ois . readObject (); if ( str instanceof String ) { String strObj = ( String ) str ; System . out . println ( strObj ); } if ( date instanceof Date ) { Date dateObj = ( Date ) date ; System . out . println ( dateObj ); } if ( employee instanceof Employee ) { Employee empObj = ( Employee ) employee ; System . out . println ( empObj . getName () + -- + empObj . getSalary ()); } ois . close (); } } //Javabean class Employee implements java . io . Serializable { private static final long serialVersionUID = 1208818830691668617L ; private transient String name ; //\u8be5\u6570\u636e\u4e0d\u9700\u8981\u5e8f\u5217\u5316 private double salary ; public Employee () { } public Employee ( String name , double salary ) { this . name = name ; this . salary = salary ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public double getSalary () { return salary ; } public void setSalary ( double salary ) { this . salary = salary ; } }","title":"Object Stream"},{"location":"IO Streams/IO/IO/#random-access","text":"import java.io.BufferedInputStream ; import java.io.BufferedOutputStream ; import java.io.File ; import java.io.FileInputStream ; import java.io.FileOutputStream ; import java.io.IOException ; import java.io.InputStream ; import java.io.OutputStream ; import java.io.RandomAccessFile ; import java.io.SequenceInputStream ; import java.util.ArrayList ; import java.util.List ; import java.util.Vector ; public class SplitFile { //\u6e90\u5934 private File src ; //\u76ee\u7684\u5730(\u6587\u4ef6\u5939) private String destDir ; //\u6240\u6709\u5206\u5272\u540e\u7684\u6587\u4ef6\u5b58\u50a8\u8def\u5f84 private List String destPaths ; //\u6bcf\u5757\u5927\u5c0f private int blockSize ; //\u5757\u6570: \u591a\u5c11\u5757 private int size ; public SplitFile ( String srcPath , String destDir ) { this ( srcPath , destDir , 1024 ); } public SplitFile ( String srcPath , String destDir , int blockSize ) { this . src = new File ( srcPath ); this . destDir = destDir ; this . blockSize = blockSize ; this . destPaths = new ArrayList String (); //\u521d\u59cb\u5316 init (); } //\u521d\u59cb\u5316 private void init () { //\u603b\u957f\u5ea6 long len = this . src . length (); //\u5757\u6570: \u591a\u5c11\u5757 this . size = ( int ) Math . ceil ( len * 1.0 / blockSize ); //\u8def\u5f84 for ( int i = 0 ; i size ; i ++) { this . destPaths . add ( this . destDir + / + i + - + this . src . getName ()); } } /** * \u5206\u5272 * 1\u3001\u8ba1\u7b97\u6bcf\u4e00\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e\u53ca\u5927\u5c0f * 2\u3001\u5206\u5272 * @throws IOException */ public void split () throws IOException { //\u603b\u957f\u5ea6 long len = src . length (); //\u8d77\u59cb\u4f4d\u7f6e\u548c\u5b9e\u9645\u5927\u5c0f int beginPos = 0 ; int actualSize = ( int )( blockSize len ? len : blockSize ); for ( int i = 0 ; i size ; i ++) { beginPos = i * blockSize ; if ( i == size - 1 ) { //\u6700\u540e\u4e00\u5757 actualSize = ( int ) len ; } else { actualSize = blockSize ; len -= actualSize ; //\u5269\u4f59\u91cf } splitDetail ( i , beginPos , actualSize ); } } /** * \u6307\u5b9a\u7b2ci\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e \u548c\u5b9e\u9645\u957f\u5ea6 * @param i * @param beginPos * @param actualSize * @throws IOException */ private void splitDetail ( int i , int beginPos , int actualSize ) throws IOException { RandomAccessFile raf = new RandomAccessFile ( this . src , r ); RandomAccessFile raf2 = new RandomAccessFile ( this . destPaths . get ( i ), rw ); //\u968f\u673a\u8bfb\u53d6 raf . seek ( beginPos ); //\u8bfb\u53d6 //3\u3001\u64cd\u4f5c (\u5206\u6bb5\u8bfb\u53d6) byte [] flush = new byte [ 1024 ]; //\u7f13\u51b2\u5bb9\u5668 int len = - 1 ; //\u63a5\u6536\u957f\u5ea6 while (( len = raf . read ( flush )) != - 1 ) { if ( actualSize len ) { //\u83b7\u53d6\u672c\u6b21\u8bfb\u53d6\u7684\u6240\u6709\u5185\u5bb9 raf2 . write ( flush , 0 , len ); actualSize -= len ; } else { raf2 . write ( flush , 0 , actualSize ); break ; } } raf2 . close (); raf . close (); } /** * \u6587\u4ef6\u7684\u5408\u5e76 * @throws IOException */ public void merge ( String destPath ) throws IOException { //\u8f93\u51fa\u6d41 OutputStream os = new BufferedOutputStream ( new FileOutputStream ( destPath , true )); //\u8f93\u5165\u6d41 for ( int i = 0 ; i destPaths . size (); i ++) { InputStream is = new BufferedInputStream ( new FileInputStream ( destPaths . get ( i ))); byte [] flush = new byte [ 1024 ]; int len = - 1 ; while (( len = is . read ( flush )) != - 1 ) { os . write ( flush , 0 , len ); } os . flush (); is . close (); } os . close (); } public static void main ( String [] args ) throws IOException { SplitFile sf = new SplitFile ( src/main/java/basic/IO/Copy.java , src/images/ ) ; sf . split (); sf . merge ( src/images/merge01.java ); } }","title":"Random Access"},{"location":"IO Streams/IO/IO/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"IO Streams/IO/IO/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"Networking/Socket/Socket/","text":"Java Socket Overview API InetAddress.getLocalHost(): Returns the address of the local host. InetAddress.getByAddress(byte[] addr): Returns an InetAddress object given the raw IP address . InetAddress.getByName(String host): Determines the IP address of a host, given the host s name. getHostAddress(): Gets the host name for this IP address. getHostAddress(): Returns the IP address string in textual presentation. IP import java.net.InetAddress ; import java.net.UnknownHostException ; public class SocketDemo { public static void main ( String [] args ) throws UnknownHostException { // \u4f7f\u7528getLocalHost\u65b9\u6cd5\u521b\u5efaInetAddress\u5bf9\u8c61 \u672c\u673a InetAddress addr = InetAddress . getLocalHost (); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636e\u57df\u540d\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( www.baidu.com ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636eip\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( 104.193.88.77 ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u8f93\u51faip\u800c\u4e0d\u662f\u57df\u540d\u3002\u5982\u679c\u8fd9\u4e2aIP\u5730 \u5740\u4e0d\u5b58\u5728\u6216DNS\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u8fdb\u884cIP\u5730\u5740\u548c\u57df\u540d\u7684\u6620\u5c04\uff0c } } Port import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) { //\u5305\u542b\u7aef\u53e3 InetSocketAddress socketAddress = new InetSocketAddress ( 127.0.0.1 , 8080 ); InetSocketAddress socketAddress2 = new InetSocketAddress ( localhost , 9000 ); System . out . println ( socketAddress . getHostName ()); System . out . println ( socketAddress . getAddress ()); System . out . println ( socketAddress2 . getAddress ()); System . out . println ( socketAddress2 . getPort ()); } } URL import java.net.MalformedURLException ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws MalformedURLException { URL url = new URL ( http://www.baidu.com:80/index.html?uname=shsxt age=18#a ); // \u83b7\u53d6\u56db\u4e2a\u503c System . out . println ( \u534f\u8bae: + url . getProtocol ()); System . out . println ( \u57df\u540d|ip: + url . getHost ()); System . out . println ( \u7aef\u53e3: + url . getPort ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e901: + url . getFile ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e902: + url . getPath ()); // \u53c2\u6570 System . out . println ( \u53c2\u6570: + url . getQuery ()); // \u951a\u70b9 System . out . println ( \u951a\u70b9: + url . getRef ()); } } Spider import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStream ; import java.io.InputStreamReader ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws IOException { // \u83b7\u53d6URL URL url = new URL ( https://www.jd.com ); InputStream is = url . openStream (); BufferedReader br = new BufferedReader ( new InputStreamReader ( is , UTF-8 )); String msg = null ; while ( null != ( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); // \u5206\u6790 // \u5904\u7406\u3002\u3002\u3002\u3002 } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.net.HttpURLConnection ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws Exception { //\u83b7\u53d6URL URL url = new URL ( https://www.dianping.com ); //\u4e0b\u8f7d\u8d44\u6e90 HttpURLConnection conn =( HttpURLConnection ) url . openConnection (); conn . setRequestMethod ( GET ); conn . setRequestProperty ( User-Agent , Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36 ); BufferedReader br = new BufferedReader ( new InputStreamReader ( conn . getInputStream (), UTF-8 )); String msg = null ; while ( null !=( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); //\u5206\u6790 //\u5904\u7406\u3002\u3002\u3002\u3002 } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"1 Socket"},{"location":"Networking/Socket/Socket/#java-socket","text":"","title":"Java Socket"},{"location":"Networking/Socket/Socket/#overview","text":"API InetAddress.getLocalHost(): Returns the address of the local host. InetAddress.getByAddress(byte[] addr): Returns an InetAddress object given the raw IP address . InetAddress.getByName(String host): Determines the IP address of a host, given the host s name. getHostAddress(): Gets the host name for this IP address. getHostAddress(): Returns the IP address string in textual presentation.","title":"Overview"},{"location":"Networking/Socket/Socket/#ip","text":"import java.net.InetAddress ; import java.net.UnknownHostException ; public class SocketDemo { public static void main ( String [] args ) throws UnknownHostException { // \u4f7f\u7528getLocalHost\u65b9\u6cd5\u521b\u5efaInetAddress\u5bf9\u8c61 \u672c\u673a InetAddress addr = InetAddress . getLocalHost (); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636e\u57df\u540d\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( www.baidu.com ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u6839\u636eip\u5f97\u5230InetAddress\u5bf9\u8c61 addr = InetAddress . getByName ( 104.193.88.77 ); System . out . println ( addr . getHostName ()); System . out . println ( addr . getHostAddress ()); // \u8f93\u51faip\u800c\u4e0d\u662f\u57df\u540d\u3002\u5982\u679c\u8fd9\u4e2aIP\u5730 \u5740\u4e0d\u5b58\u5728\u6216DNS\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u8fdb\u884cIP\u5730\u5740\u548c\u57df\u540d\u7684\u6620\u5c04\uff0c } }","title":"IP"},{"location":"Networking/Socket/Socket/#port","text":"import java.net.InetSocketAddress ; public class SocketDemo { public static void main ( String [] args ) { //\u5305\u542b\u7aef\u53e3 InetSocketAddress socketAddress = new InetSocketAddress ( 127.0.0.1 , 8080 ); InetSocketAddress socketAddress2 = new InetSocketAddress ( localhost , 9000 ); System . out . println ( socketAddress . getHostName ()); System . out . println ( socketAddress . getAddress ()); System . out . println ( socketAddress2 . getAddress ()); System . out . println ( socketAddress2 . getPort ()); } }","title":"Port"},{"location":"Networking/Socket/Socket/#url","text":"import java.net.MalformedURLException ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws MalformedURLException { URL url = new URL ( http://www.baidu.com:80/index.html?uname=shsxt age=18#a ); // \u83b7\u53d6\u56db\u4e2a\u503c System . out . println ( \u534f\u8bae: + url . getProtocol ()); System . out . println ( \u57df\u540d|ip: + url . getHost ()); System . out . println ( \u7aef\u53e3: + url . getPort ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e901: + url . getFile ()); System . out . println ( \u8bf7\u6c42\u8d44\u6e902: + url . getPath ()); // \u53c2\u6570 System . out . println ( \u53c2\u6570: + url . getQuery ()); // \u951a\u70b9 System . out . println ( \u951a\u70b9: + url . getRef ()); } }","title":"URL"},{"location":"Networking/Socket/Socket/#spider","text":"import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStream ; import java.io.InputStreamReader ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws IOException { // \u83b7\u53d6URL URL url = new URL ( https://www.jd.com ); InputStream is = url . openStream (); BufferedReader br = new BufferedReader ( new InputStreamReader ( is , UTF-8 )); String msg = null ; while ( null != ( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); // \u5206\u6790 // \u5904\u7406\u3002\u3002\u3002\u3002 } } import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.net.HttpURLConnection ; import java.net.URL ; public class SocketDemo { public static void main ( String [] args ) throws Exception { //\u83b7\u53d6URL URL url = new URL ( https://www.dianping.com ); //\u4e0b\u8f7d\u8d44\u6e90 HttpURLConnection conn =( HttpURLConnection ) url . openConnection (); conn . setRequestMethod ( GET ); conn . setRequestProperty ( User-Agent , Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36 ); BufferedReader br = new BufferedReader ( new InputStreamReader ( conn . getInputStream (), UTF-8 )); String msg = null ; while ( null !=( msg = br . readLine ())) { System . out . println ( msg ); } br . close (); //\u5206\u6790 //\u5904\u7406\u3002\u3002\u3002\u3002 } }","title":"Spider"},{"location":"Networking/Socket/Socket/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Networking/Socket/Socket/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"Networking/TCP/TCP/","text":"Java TCP Overview API TCP Server import java.io.DataInputStream ; import java.io.IOException ; import java.net.ServerSocket ; import java.net.Socket ; public class TCPServer { public static void main ( String [] args ) throws IOException { System . out . println ( -----Server----- ); // 1\u3001\u6307\u5b9a\u7aef\u53e3 \u4f7f\u7528ServerSocket\u521b\u5efa\u670d\u52a1\u5668 ServerSocket server = new ServerSocket ( 8888 ); // 2\u3001\u963b\u585e\u5f0f\u7b49\u5f85\u8fde\u63a5 accept Socket client = server . accept (); System . out . println ( set up a connection ); // 3\u3001\u64cd\u4f5c: \u8f93\u5165\u8f93\u51fa\u6d41\u64cd\u4f5c DataInputStream dis = new DataInputStream ( client . getInputStream ()); String data = dis . readUTF (); System . out . println ( data ); // 4\u3001\u91ca\u653e\u8d44\u6e90 dis . close (); client . close (); server . close (); } } TCP Client import java.io.BufferedReader ; import java.io.DataOutputStream ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.Socket ; import java.net.UnknownHostException ; public class TCPClient { public static void main ( String [] args ) throws UnknownHostException , IOException { System . out . println ( -----Client----- ); BufferedReader console = new BufferedReader ( new InputStreamReader ( System . in )); System . out . print ( entry username: ); String uname = console . readLine (); System . out . print ( entry password: ); String upwd = console . readLine (); Socket client = new Socket ( localhost , 8888 ); // 2\u3001\u64cd\u4f5c: \u8f93\u5165\u8f93\u51fa\u6d41\u64cd\u4f5c DataOutputStream dos = new DataOutputStream ( client . getOutputStream ()); dos . writeUTF ( uname= + uname + + upwd= + upwd ); dos . flush (); // 3\u3001\u91ca\u653e\u8d44\u6e90 dos . close (); client . close (); } } Chart import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.Socket ; public class Client { public static void main ( String [] args ) throws IOException { System . out . println ( -----Client----- ); BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in )); System . out . println ( please entry your name: ); String name = br . readLine (); // 1\u3001\u5efa\u7acb\u8fde\u63a5: \u4f7f\u7528Socket\u521b\u5efa\u5ba2\u6237\u7aef +\u670d\u52a1\u7684\u5730\u5740\u548c\u7aef\u53e3 Socket client = new Socket ( localhost , 8888 ); // 2\u3001\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f new Thread ( new Send ( client , name )). start (); new Thread ( new Receive ( client )). start (); } } import java.io.BufferedReader ; import java.io.DataOutputStream ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.Socket ; public class Send implements Runnable { private BufferedReader console ; private DataOutputStream dos ; private Socket client ; private boolean isRunning ; @SuppressWarnings ( unused ) private String name ; public Send ( Socket client , String name ) { this . client = client ; this . console = new BufferedReader ( new InputStreamReader ( System . in )); this . isRunning = true ; this . name = name ; try { this . dos = new DataOutputStream ( client . getOutputStream ()); send ( name ); } catch ( IOException e ) { this . release (); } } private void release () { this . isRunning = false ; ChatUtils . close ( dos , client ); } private String getStrFromConsole () { try { return console . readLine (); } catch ( IOException e ) { e . printStackTrace (); } return ; } private void send ( String msg ) { try { dos . writeUTF ( msg ); dos . flush (); } catch ( IOException e ) { System . out . println ( this . name + send fail ); release (); } } @Override public void run () { while ( isRunning ) { String msg = getStrFromConsole (); if (! msg . equals ( )) { send ( msg ); } } } } import java.io.DataInputStream ; import java.io.IOException ; import java.net.Socket ; public class Receive implements Runnable { private DataInputStream dis ; private Socket client ; private boolean isRunning ; public Receive ( Socket client ) { this . client = client ; this . isRunning = true ; try { dis = new DataInputStream ( client . getInputStream ()); } catch ( IOException e ) { System . out . println ( ----receive 1---- ); this . release (); } } private String receive () { String msg = ; try { msg = dis . readUTF (); } catch ( IOException e ) { System . out . println ( ----receive 2---- ); this . release (); } return msg ; } private void release () { ChatUtils . close ( dis , client ); this . isRunning = false ; } @Override public void run () { while ( isRunning ) { String msg = receive (); if (! msg . equals ( )) { System . out . println ( msg ); } } } } import java.io.DataInputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.ServerSocket ; import java.net.Socket ; import java.util.concurrent.CopyOnWriteArrayList ; public class Chat { private static CopyOnWriteArrayList Channel all = new CopyOnWriteArrayList Channel (); static class Channel implements Runnable { private DataInputStream dis ; private DataOutputStream dos ; private Socket client ; private boolean isRunning ; private String name ; public Channel ( Socket client ) { this . client = client ; try { dis = new DataInputStream ( client . getInputStream ()); dos = new DataOutputStream ( client . getOutputStream ()); this . isRunning = true ; this . name = receive (); System . out . println ( this . name + \u6765\u5230\u804a\u5929\u5ba4 ); this . send ( \u4f60\u5df2\u8fdb\u5165\u804a\u5929\u5ba4 ); } catch ( IOException e ) { release (); } } private String receive () { String msg = ; try { msg = dis . readUTF (); } catch ( IOException e ) { System . out . println ( this . name + \u63a5\u53d7\u4fe1\u606f\u5931\u8bef ); release (); } return msg ; } private void send ( String msg ) { if (! msg . equals ( )) { try { dos . writeUTF ( msg ); } catch ( IOException e ) { System . out . println ( this . name + \u53d1\u9001\u4fe1\u606f\u5931\u8bef ); release (); } } } private void sendOthers ( String msg , boolean isSys ) { for ( Channel other : all ) { if ( other == this ) continue ; if (! isSys ) { other . send ( this . name + \u8bf4: + msg ); } else { other . send ( msg ); } } } private void release () { this . isRunning = false ; ChatUtils . close ( dis , dos , client ); all . remove ( this ); sendOthers ( this . name + \u79bb\u5f00\u5927\u5bb6\u5ead... , true ); } @Override public void run () { while ( isRunning ) { String msg = receive (); sendOthers ( msg , false ); } } } public static void main ( String [] args ) throws IOException { System . out . println ( -----Server----- ); // 1\u3001\u6307\u5b9a\u7aef\u53e3 \u4f7f\u7528ServerSocket\u521b\u5efa\u670d\u52a1\u5668 @SuppressWarnings ( resource ) ServerSocket server = new ServerSocket ( 8888 ); // 2\u3001\u963b\u585e\u5f0f\u7b49\u5f85\u8fde\u63a5 accept while ( true ) { Socket client = server . accept (); System . out . println ( \u4e00\u4e2a\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5 ); Channel c = new Channel ( client ); all . add ( c ); new Thread ( c ). start (); } } } import java.io.Closeable ; import java.io.IOException ; public class ChatUtils { public static void close ( Closeable ... targets ) { for ( Closeable target : targets ) { try { if ( null != target ) target . close (); } catch ( IOException e ) { e . printStackTrace (); } } } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"3 TCP"},{"location":"Networking/TCP/TCP/#java-tcp","text":"","title":"Java TCP"},{"location":"Networking/TCP/TCP/#overview","text":"API","title":"Overview"},{"location":"Networking/TCP/TCP/#tcp-server","text":"import java.io.DataInputStream ; import java.io.IOException ; import java.net.ServerSocket ; import java.net.Socket ; public class TCPServer { public static void main ( String [] args ) throws IOException { System . out . println ( -----Server----- ); // 1\u3001\u6307\u5b9a\u7aef\u53e3 \u4f7f\u7528ServerSocket\u521b\u5efa\u670d\u52a1\u5668 ServerSocket server = new ServerSocket ( 8888 ); // 2\u3001\u963b\u585e\u5f0f\u7b49\u5f85\u8fde\u63a5 accept Socket client = server . accept (); System . out . println ( set up a connection ); // 3\u3001\u64cd\u4f5c: \u8f93\u5165\u8f93\u51fa\u6d41\u64cd\u4f5c DataInputStream dis = new DataInputStream ( client . getInputStream ()); String data = dis . readUTF (); System . out . println ( data ); // 4\u3001\u91ca\u653e\u8d44\u6e90 dis . close (); client . close (); server . close (); } }","title":"TCP Server"},{"location":"Networking/TCP/TCP/#tcp-client","text":"import java.io.BufferedReader ; import java.io.DataOutputStream ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.Socket ; import java.net.UnknownHostException ; public class TCPClient { public static void main ( String [] args ) throws UnknownHostException , IOException { System . out . println ( -----Client----- ); BufferedReader console = new BufferedReader ( new InputStreamReader ( System . in )); System . out . print ( entry username: ); String uname = console . readLine (); System . out . print ( entry password: ); String upwd = console . readLine (); Socket client = new Socket ( localhost , 8888 ); // 2\u3001\u64cd\u4f5c: \u8f93\u5165\u8f93\u51fa\u6d41\u64cd\u4f5c DataOutputStream dos = new DataOutputStream ( client . getOutputStream ()); dos . writeUTF ( uname= + uname + + upwd= + upwd ); dos . flush (); // 3\u3001\u91ca\u653e\u8d44\u6e90 dos . close (); client . close (); } }","title":"TCP Client"},{"location":"Networking/TCP/TCP/#chart","text":"import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.Socket ; public class Client { public static void main ( String [] args ) throws IOException { System . out . println ( -----Client----- ); BufferedReader br = new BufferedReader ( new InputStreamReader ( System . in )); System . out . println ( please entry your name: ); String name = br . readLine (); // 1\u3001\u5efa\u7acb\u8fde\u63a5: \u4f7f\u7528Socket\u521b\u5efa\u5ba2\u6237\u7aef +\u670d\u52a1\u7684\u5730\u5740\u548c\u7aef\u53e3 Socket client = new Socket ( localhost , 8888 ); // 2\u3001\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f new Thread ( new Send ( client , name )). start (); new Thread ( new Receive ( client )). start (); } } import java.io.BufferedReader ; import java.io.DataOutputStream ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.Socket ; public class Send implements Runnable { private BufferedReader console ; private DataOutputStream dos ; private Socket client ; private boolean isRunning ; @SuppressWarnings ( unused ) private String name ; public Send ( Socket client , String name ) { this . client = client ; this . console = new BufferedReader ( new InputStreamReader ( System . in )); this . isRunning = true ; this . name = name ; try { this . dos = new DataOutputStream ( client . getOutputStream ()); send ( name ); } catch ( IOException e ) { this . release (); } } private void release () { this . isRunning = false ; ChatUtils . close ( dos , client ); } private String getStrFromConsole () { try { return console . readLine (); } catch ( IOException e ) { e . printStackTrace (); } return ; } private void send ( String msg ) { try { dos . writeUTF ( msg ); dos . flush (); } catch ( IOException e ) { System . out . println ( this . name + send fail ); release (); } } @Override public void run () { while ( isRunning ) { String msg = getStrFromConsole (); if (! msg . equals ( )) { send ( msg ); } } } } import java.io.DataInputStream ; import java.io.IOException ; import java.net.Socket ; public class Receive implements Runnable { private DataInputStream dis ; private Socket client ; private boolean isRunning ; public Receive ( Socket client ) { this . client = client ; this . isRunning = true ; try { dis = new DataInputStream ( client . getInputStream ()); } catch ( IOException e ) { System . out . println ( ----receive 1---- ); this . release (); } } private String receive () { String msg = ; try { msg = dis . readUTF (); } catch ( IOException e ) { System . out . println ( ----receive 2---- ); this . release (); } return msg ; } private void release () { ChatUtils . close ( dis , client ); this . isRunning = false ; } @Override public void run () { while ( isRunning ) { String msg = receive (); if (! msg . equals ( )) { System . out . println ( msg ); } } } } import java.io.DataInputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.ServerSocket ; import java.net.Socket ; import java.util.concurrent.CopyOnWriteArrayList ; public class Chat { private static CopyOnWriteArrayList Channel all = new CopyOnWriteArrayList Channel (); static class Channel implements Runnable { private DataInputStream dis ; private DataOutputStream dos ; private Socket client ; private boolean isRunning ; private String name ; public Channel ( Socket client ) { this . client = client ; try { dis = new DataInputStream ( client . getInputStream ()); dos = new DataOutputStream ( client . getOutputStream ()); this . isRunning = true ; this . name = receive (); System . out . println ( this . name + \u6765\u5230\u804a\u5929\u5ba4 ); this . send ( \u4f60\u5df2\u8fdb\u5165\u804a\u5929\u5ba4 ); } catch ( IOException e ) { release (); } } private String receive () { String msg = ; try { msg = dis . readUTF (); } catch ( IOException e ) { System . out . println ( this . name + \u63a5\u53d7\u4fe1\u606f\u5931\u8bef ); release (); } return msg ; } private void send ( String msg ) { if (! msg . equals ( )) { try { dos . writeUTF ( msg ); } catch ( IOException e ) { System . out . println ( this . name + \u53d1\u9001\u4fe1\u606f\u5931\u8bef ); release (); } } } private void sendOthers ( String msg , boolean isSys ) { for ( Channel other : all ) { if ( other == this ) continue ; if (! isSys ) { other . send ( this . name + \u8bf4: + msg ); } else { other . send ( msg ); } } } private void release () { this . isRunning = false ; ChatUtils . close ( dis , dos , client ); all . remove ( this ); sendOthers ( this . name + \u79bb\u5f00\u5927\u5bb6\u5ead... , true ); } @Override public void run () { while ( isRunning ) { String msg = receive (); sendOthers ( msg , false ); } } } public static void main ( String [] args ) throws IOException { System . out . println ( -----Server----- ); // 1\u3001\u6307\u5b9a\u7aef\u53e3 \u4f7f\u7528ServerSocket\u521b\u5efa\u670d\u52a1\u5668 @SuppressWarnings ( resource ) ServerSocket server = new ServerSocket ( 8888 ); // 2\u3001\u963b\u585e\u5f0f\u7b49\u5f85\u8fde\u63a5 accept while ( true ) { Socket client = server . accept (); System . out . println ( \u4e00\u4e2a\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5 ); Channel c = new Channel ( client ); all . add ( c ); new Thread ( c ). start (); } } } import java.io.Closeable ; import java.io.IOException ; public class ChatUtils { public static void close ( Closeable ... targets ) { for ( Closeable target : targets ) { try { if ( null != target ) target . close (); } catch ( IOException e ) { e . printStackTrace (); } } } }","title":"Chart"},{"location":"Networking/TCP/TCP/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Networking/TCP/TCP/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"Networking/UDP/UDP/","text":"Java UDP Overview API receive(DatagramPacket p): Receives a datagram packet from this socket. send(DatagramPacket p): Sends a datagram packet from this socket. Send Data Package package networking.location ; import java.io.BufferedOutputStream ; import java.io.ByteArrayOutputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class UDP { public static void main ( String [] args ) throws IOException { System . out . println ( Sending data.... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); // 2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 // \u5199\u51fa ByteArrayOutputStream baos = new ByteArrayOutputStream (); DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( baos )); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e dos . writeUTF ( coding coding coding ); dos . writeInt ( 18 ); dos . writeBoolean ( false ); dos . writeChar ( a ); dos . flush (); byte [] datas = baos . toByteArray (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } } UDP Server import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; public class UDPServer { public static void main ( String [] args ) throws IOException { System . out . println ( receiveing data..... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u63a5\u6536\u7aef DatagramSocket server = new DatagramSocket ( 6666 ); // 2\u3001\u51c6\u5907\u5bb9\u5668 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9 byte [] container = new byte [ 1024 * 60 ]; DatagramPacket packet = new DatagramPacket ( container , 0 , container . length ); // 3\u3001\u963b\u585e\u5f0f\u63a5\u6536\u5305\u88f9receive\u200b(DatagramPacket p) server . receive ( packet ); // \u963b\u585e\u5f0f // 4\u3001\u5206\u6790\u6570\u636e byte [] datas = packet . getData (); int len = packet . getLength (); System . out . println ( new String ( datas , 0 , len )); // 5\u3001\u91ca\u653e\u8d44\u6e90 server . close (); } s } UDP Client import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class UDPClient { public static void main ( String [] args ) throws IOException { System . out . println ( send data..... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); //2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 String data = send something ; byte [] datas = data . getBytes (); //3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); //4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } } Chart import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; import java.net.SocketException ; public class ChartSend implements Runnable { private DatagramSocket client ; private BufferedReader reader ; private String toIP ; private int toPort ; public TalkSend ( int port , String toIP , int toPort ) { this . toIP = toIP ; this . toPort = toPort ; try { client = new DatagramSocket ( port ); reader = new BufferedReader ( new InputStreamReader ( System . in )); } catch ( SocketException e ) { e . printStackTrace (); } } @Override public void run () { while ( true ) { String data ; try { data = reader . readLine (); byte [] datas = data . getBytes (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( this . toIP , this . toPort )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); if ( data . equals ( bye )) { break ; } } catch ( IOException e ) { e . printStackTrace (); } } // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } } import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.SocketException ; public class ChartReceive implements Runnable { private DatagramSocket server ; private String from ; public TalkReceive ( int port , String from ) { this . from = from ; try { server = new DatagramSocket ( port ); } catch ( SocketException e ) { e . printStackTrace (); } } @Override public void run () { while ( true ) { // 2\u3001\u51c6\u5907\u5bb9\u5668 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9 byte [] container = new byte [ 1024 * 60 ]; DatagramPacket packet = new DatagramPacket ( container , 0 , container . length ); // 3\u3001\u963b\u585e\u5f0f\u63a5\u6536\u5305\u88f9receive\u200b(DatagramPacket p) try { server . receive ( packet ); // \u963b\u585e\u5f0f // 4\u3001\u5206\u6790\u6570\u636e byte [] datas = packet . getData (); int len = packet . getLength (); String data = new String ( datas , 0 , len ); System . out . println ( from + : + data ); if ( data . equals ( bye )) { break ; } } catch ( IOException e ) { e . printStackTrace (); } } // 5\u3001\u91ca\u653e\u8d44\u6e90 server . close (); } } Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"2 UDP"},{"location":"Networking/UDP/UDP/#java-udp","text":"","title":"Java UDP"},{"location":"Networking/UDP/UDP/#overview","text":"API receive(DatagramPacket p): Receives a datagram packet from this socket. send(DatagramPacket p): Sends a datagram packet from this socket.","title":"Overview"},{"location":"Networking/UDP/UDP/#send-data-package","text":"package networking.location ; import java.io.BufferedOutputStream ; import java.io.ByteArrayOutputStream ; import java.io.DataOutputStream ; import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class UDP { public static void main ( String [] args ) throws IOException { System . out . println ( Sending data.... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); // 2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 // \u5199\u51fa ByteArrayOutputStream baos = new ByteArrayOutputStream (); DataOutputStream dos = new DataOutputStream ( new BufferedOutputStream ( baos )); // \u64cd\u4f5c\u6570\u636e\u7c7b\u578b +\u6570\u636e dos . writeUTF ( coding coding coding ); dos . writeInt ( 18 ); dos . writeBoolean ( false ); dos . writeChar ( a ); dos . flush (); byte [] datas = baos . toByteArray (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } }","title":"Send Data Package"},{"location":"Networking/UDP/UDP/#udp-server","text":"import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; public class UDPServer { public static void main ( String [] args ) throws IOException { System . out . println ( receiveing data..... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u63a5\u6536\u7aef DatagramSocket server = new DatagramSocket ( 6666 ); // 2\u3001\u51c6\u5907\u5bb9\u5668 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9 byte [] container = new byte [ 1024 * 60 ]; DatagramPacket packet = new DatagramPacket ( container , 0 , container . length ); // 3\u3001\u963b\u585e\u5f0f\u63a5\u6536\u5305\u88f9receive\u200b(DatagramPacket p) server . receive ( packet ); // \u963b\u585e\u5f0f // 4\u3001\u5206\u6790\u6570\u636e byte [] datas = packet . getData (); int len = packet . getLength (); System . out . println ( new String ( datas , 0 , len )); // 5\u3001\u91ca\u653e\u8d44\u6e90 server . close (); } s }","title":"UDP Server"},{"location":"Networking/UDP/UDP/#udp-client","text":"import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; public class UDPClient { public static void main ( String [] args ) throws IOException { System . out . println ( send data..... ); // 1\u3001\u4f7f\u7528DatagramSocket \u6307\u5b9a\u7aef\u53e3 \u521b\u5efa\u53d1\u9001\u7aef DatagramSocket client = new DatagramSocket ( 8888 ); //2\u3001\u51c6\u5907\u6570\u636e \u4e00\u5b9a\u8f6c\u6210\u5b57\u8282\u6570\u7ec4 String data = send something ; byte [] datas = data . getBytes (); //3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( localhost , 6666 )); //4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } }","title":"UDP Client"},{"location":"Networking/UDP/UDP/#chart","text":"import java.io.BufferedReader ; import java.io.IOException ; import java.io.InputStreamReader ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.InetSocketAddress ; import java.net.SocketException ; public class ChartSend implements Runnable { private DatagramSocket client ; private BufferedReader reader ; private String toIP ; private int toPort ; public TalkSend ( int port , String toIP , int toPort ) { this . toIP = toIP ; this . toPort = toPort ; try { client = new DatagramSocket ( port ); reader = new BufferedReader ( new InputStreamReader ( System . in )); } catch ( SocketException e ) { e . printStackTrace (); } } @Override public void run () { while ( true ) { String data ; try { data = reader . readLine (); byte [] datas = data . getBytes (); // 3\u3001 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9\uff0c\u9700\u8981\u6307\u5b9a\u76ee\u7684\u5730 DatagramPacket packet = new DatagramPacket ( datas , 0 , datas . length , new InetSocketAddress ( this . toIP , this . toPort )); // 4\u3001\u53d1\u9001\u5305\u88f9send\u200b(DatagramPacket p) * client . send ( packet ); if ( data . equals ( bye )) { break ; } } catch ( IOException e ) { e . printStackTrace (); } } // 5\u3001\u91ca\u653e\u8d44\u6e90 client . close (); } } import java.io.IOException ; import java.net.DatagramPacket ; import java.net.DatagramSocket ; import java.net.SocketException ; public class ChartReceive implements Runnable { private DatagramSocket server ; private String from ; public TalkReceive ( int port , String from ) { this . from = from ; try { server = new DatagramSocket ( port ); } catch ( SocketException e ) { e . printStackTrace (); } } @Override public void run () { while ( true ) { // 2\u3001\u51c6\u5907\u5bb9\u5668 \u5c01\u88c5\u6210DatagramPacket \u5305\u88f9 byte [] container = new byte [ 1024 * 60 ]; DatagramPacket packet = new DatagramPacket ( container , 0 , container . length ); // 3\u3001\u963b\u585e\u5f0f\u63a5\u6536\u5305\u88f9receive\u200b(DatagramPacket p) try { server . receive ( packet ); // \u963b\u585e\u5f0f // 4\u3001\u5206\u6790\u6570\u636e byte [] datas = packet . getData (); int len = packet . getLength (); String data = new String ( datas , 0 , len ); System . out . println ( from + : + data ); if ( data . equals ( bye )) { break ; } } catch ( IOException e ) { e . printStackTrace (); } } // 5\u3001\u91ca\u653e\u8d44\u6e90 server . close (); } }","title":"Chart"},{"location":"Networking/UDP/UDP/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Networking/UDP/UDP/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"Web/Servlet/Servlet/","text":"Java Servelt Overview Entity public class Entity { private String name ; private String clz ; public Entity () { // TODO Auto-generated constructor stub } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public String getClz () { return clz ; } public void setClz ( String clz ) { this . clz = clz ; } } Mapping import java.util.HashSet ; import java.util.Set ; public class Mapping { private String name ; private Set String patterns ; public Mapping () { patterns = new HashSet String (); } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public Set String getPatterns () { return patterns ; } public void setPatterns ( Set String patterns ) { this . patterns = patterns ; } public void addPattern ( String pattern ) { this . patterns . add ( pattern ); } } Request import java.io.IOException ; import java.io.InputStream ; import java.io.UnsupportedEncodingException ; import java.net.Socket ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.HashMap ; import java.util.List ; import java.util.Map ; public class Request { // \u534f\u8bae\u6d88\u606f private String requestInfo ; // \u8bf7\u6c42\u65b9\u5f0f private String method ; // \u8bf7\u6c42url private String url ; // \u8bf7\u6c42\u53c2\u6570 private String queryStr ; private Map String , List String parameterMap ; private final String CRLF = \\r\\n ; public Request ( Socket client ) throws IOException { this ( client . getInputStream ()); } public Request ( InputStream is ) { parameterMap = new HashMap (); byte [] datas = new byte [ 1024 * 1024 ]; int len ; try { len = is . read ( datas ); this . requestInfo = new String ( datas , 0 , len ); } catch ( IOException e ) { e . printStackTrace (); return ; } // \u5206\u89e3\u5b57\u7b26\u4e32 parseRequestInfo (); } private void parseRequestInfo () { System . out . println ( ------\u5206\u89e3------- ); System . out . println ( ---1\u3001\u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f: \u5f00\u5934\u5230\u7b2c\u4e00\u4e2a/------ ); this . method = this . requestInfo . substring ( 0 , this . requestInfo . indexOf ( / )). toLowerCase (); this . method = this . method . trim (); System . out . println ( ---2\u3001\u83b7\u53d6\u8bf7\u6c42url: \u7b2c\u4e00\u4e2a/ \u5230 HTTP/------ ); System . out . println ( ---\u53ef\u80fd\u5305\u542b\u8bf7\u6c42\u53c2\u6570? \u524d\u9762\u7684\u4e3aurl------ ); // 1)\u3001\u83b7\u53d6/\u7684\u4f4d\u7f6e int startIdx = this . requestInfo . indexOf ( / ) + 1 ; // 2)\u3001\u83b7\u53d6 HTTP/\u7684\u4f4d\u7f6e int endIdx = this . requestInfo . indexOf ( HTTP/ ); // 3)\u3001\u5206\u5272\u5b57\u7b26\u4e32 this . url = this . requestInfo . substring ( startIdx , endIdx ); // 4)\u3001\u83b7\u53d6\uff1f\u7684\u4f4d\u7f6e int queryIdx = this . url . indexOf ( ? ); if ( queryIdx = 0 ) { // \u8868\u793a\u5b58\u5728\u8bf7\u6c42\u53c2\u6570 String [] urlArray = this . url . split ( \\\\? ); this . url = urlArray [ 0 ]; queryStr = urlArray [ 1 ]; } System . out . println ( this . url ); System . out . println ( ---3\u3001\u83b7\u53d6\u8bf7\u6c42\u53c2\u6570:\u5982\u679cGet\u5df2\u7ecf\u83b7\u53d6,\u5982\u679c\u662fpost\u53ef\u80fd\u5728\u8bf7\u6c42\u4f53\u4e2d------ ); if ( method . equals ( post )) { String qStr = this . requestInfo . substring ( this . requestInfo . lastIndexOf ( CRLF )). trim (); System . out . println ( qStr + -- ); if ( null == queryStr ) { queryStr = qStr ; } else { queryStr += + qStr ; } } queryStr = null == queryStr ? : queryStr ; System . out . println ( method + -- + url + -- + queryStr ); // \u8f6c\u6210Map fav=1 fav=2 uname=shsxt age=18 others= convertMap (); } // \u5904\u7406\u8bf7\u6c42\u53c2\u6570\u4e3aMap private void convertMap () { // 1\u3001\u5206\u5272\u5b57\u7b26\u4e32 String [] keyValues = queryStr . split ( ); for ( String query : keyValues ) { // 2\u3001\u518d\u6b21\u5206\u5272\u5b57\u7b26\u4e32 = String [] kv = query . split ( = ); kv = Arrays . copyOf ( kv , 2 ); // \u83b7\u53d6key\u548cvalue String key = kv [ 0 ]; String value = kv [ 1 ] == null ? null : decode ( kv [ 1 ], utf-8 ); // \u5b58\u50a8\u5230map\u4e2d if (! parameterMap . containsKey ( key )) { // \u7b2c\u4e00\u6b21 parameterMap . put ( key , new ArrayList String ()); } parameterMap . get ( key ). add ( value ); } } private String decode ( String value , String enc ) { try { return java . net . URLDecoder . decode ( value , enc ); } catch ( UnsupportedEncodingException e ) { e . printStackTrace (); } return null ; } public String [] getParameterValues ( String key ) { List String values = this . parameterMap . get ( key ); if ( null == values || values . size () 1 ) { return null ; } return values . toArray ( new String [ 0 ]); } public String getParameter ( String key ) { String [] values = getParameterValues ( key ); return values == null ? null : values [ 0 ]; } public String getMethod () { return method ; } public String getUrl () { return url ; } public String getQueryStr () { return queryStr ; } } Response import java.io.BufferedWriter ; import java.io.IOException ; import java.io.OutputStream ; import java.io.OutputStreamWriter ; import java.net.Socket ; import java.util.Date ; public class Response { BufferedWriter bw ; // \u6b63\u6587 private StringBuilder content ; // \u534f\u8bae\u5934\uff08\u72b6\u6001\u884c\u4e0e\u8bf7\u6c42\u5934 \u56de\u8f66\uff09\u4fe1\u606f private StringBuilder headInfo ; private int len ; // \u6b63\u6587\u7684\u5b57\u8282\u6570 private final String BLANK = ; private final String CRLF = \\r\\n ; private Response () { content = new StringBuilder (); headInfo = new StringBuilder (); len = 0 ; } public Response ( Socket client ) { this (); try { bw = new BufferedWriter ( new OutputStreamWriter ( client . getOutputStream ())); } catch ( IOException e ) { e . printStackTrace (); } } public Response ( OutputStream os ) { this (); bw = new BufferedWriter ( new OutputStreamWriter ( os )); } // \u52a8\u6001\u6dfb\u52a0\u5185\u5bb9 public Response print ( String info ) { content . append ( info ); len += info . getBytes (). length ; return this ; } public Response println ( String info ) { content . append ( info ). append ( CRLF ); len += ( info + CRLF ). getBytes (). length ; return this ; } public void pushToBrowser ( int code ) throws IOException { if ( null == headInfo ) { code = 505 ; } createHeadInfo ( code ); bw . append ( headInfo ); bw . append ( content ); bw . flush (); } // \u6784\u5efa\u5934\u4fe1\u606f private void createHeadInfo ( int code ) { // 1\u3001\u54cd\u5e94\u884c: HTTP/1.1 200 OK headInfo . append ( HTTP/1.1 ). append ( BLANK ); headInfo . append ( code ). append ( BLANK ); switch ( code ) { case 200 : headInfo . append ( OK ). append ( CRLF ); break ; case 404 : headInfo . append ( NOT FOUND ). append ( CRLF ); break ; case 505 : headInfo . append ( SERVER ERROR ). append ( CRLF ); break ; } headInfo . append ( Date: ). append ( new Date ()). append ( CRLF ); headInfo . append ( Server: ). append ( wsserver Server/0.0.1;charset=UTF-8 ). append ( CRLF ); headInfo . append ( Content-type:text/html ). append ( CRLF ); headInfo . append ( Content-length: + len ). append ( CRLF ); headInfo . append ( CRLF ); } } Server import java.io.IOException ; import java.net.ServerSocket ; import java.net.Socket ; public class Server { private ServerSocket serverSocket ; private boolean isRunning ; public static void main ( String [] args ) { Server server = new Server (); server . start (); } // \u542f\u52a8\u670d\u52a1 public void start () { try { serverSocket = new ServerSocket ( 8888 ); isRunning = true ; receive (); } catch ( IOException e ) { e . printStackTrace (); System . out . println ( \u670d\u52a1\u5668\u542f\u52a8\u5931\u8d25.... ); } } // \u63a5\u53d7\u8fde\u63a5\u5904\u7406 public void receive () { while ( isRunning ) { try { Socket client = serverSocket . accept (); System . out . println ( \u4e00\u4e2a\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5.... ); // \u591a\u7ebf\u7a0b\u5904\u7406 new Thread ( new Dispatcher ( client )). start (); } catch ( IOException e ) { e . printStackTrace (); } } } // \u505c\u6b62\u670d\u52a1 public void stop () { isRunning = false ; try { this . serverSocket . close (); System . out . println ( \u670d\u52a1\u5668\u5df2\u505c\u6b62 ); } catch ( IOException e ) { e . printStackTrace (); } } } Dispatcher import java.io.IOException ; import java.io.InputStream ; import java.net.Socket ; public class Dispatcher implements Runnable { private Socket client ; private Request request ; private Response response ; public Dispatcher ( Socket client ) { this . client = client ; try { request = new Request ( client ); response = new Response ( client ); } catch ( IOException e ) { e . printStackTrace (); this . release (); } } // \u91ca\u653e\u8d44\u6e90 private void release () { try { client . close (); } catch ( IOException e1 ) { e1 . printStackTrace (); } } @Override public void run () { try { if ( null == request . getUrl () || request . getUrl (). equals ( )) { InputStream is = Thread . currentThread (). getContextClassLoader () . getResourceAsStream ( index.html ); int len ; byte [] flush = new byte [ 1024 ]; while (( len = is . read ( flush )) != - 1 ) { response . print ( new String ( flush , 0 , len )); } response . pushToBrowser ( 200 ); is . close (); } Servlet servlet = null ; if ( null != request . getUrl () ! request . getUrl (). equals ( )) servlet = ( Servlet ) WebApp . getServletFromUrl ( request . getUrl ()); if ( null != servlet ) { servlet . service ( request , response ); // \u5173\u6ce8\u4e86\u72b6\u6001\u7801 response . pushToBrowser ( 200 ); } else { // \u9519\u8bef.... InputStream is = Thread . currentThread (). getContextClassLoader () . getResourceAsStream ( error.html ); int len ; byte [] flush = new byte [ 1024 ]; while (( len = is . read ( flush )) != - 1 ) { response . print ( new String ( flush , 0 , len )); } response . pushToBrowser ( 404 ); is . close (); } } catch ( Exception e ) { try { response . pushToBrowser ( 500 ); } catch ( IOException e1 ) { e1 . printStackTrace (); } } release (); } } WebApp import javax.xml.parsers.SAXParser ; import javax.xml.parsers.SAXParserFactory ; public class WebApp { private static WebContext webContext ; static { try { // SAX \u89e3\u6790 // 1.\u83b7\u53d6\u89e3\u6790\u5de5\u5382 SAXParserFactory factory = SAXParserFactory . newInstance (); // 2. \u4ece\u89e3\u6790\u5de5\u5382\u4e2d\u83b7\u53d6\u89e3\u6790\u5668 SAXParser parse = factory . newSAXParser (); // 3. \u52a0\u8f7d\u6587\u6863 Document \u6ce8\u518c\u5904\u7406\u5668 // 4. \u7f16\u8f91\u5904\u7406\u5668 WebHandler handler = new WebHandler (); parse . parse ( Thread . currentThread (). getContextClassLoader (). getResourceAsStream ( web.xml ), handler ); webContext = new WebContext ( handler . getEntities (), handler . getMappings ()); } catch ( Exception e ) { System . out . println ( \u89e3\u6790\u914d\u7f6e\u6587\u4ef6\u9519\u8bef ); } } public static Servlet getServletFromUrl ( String url ) { // \u5047\u8bbe\u4f60\u8f93\u5165\u4e86 /login String className = webContext . getClz ( / + url ); System . out . println ( className: + className ); Class ? clz ; try { clz = Class . forName ( className ); Servlet servlet = ( Servlet ) clz . getConstructor (). newInstance (); System . out . println ( servlet ); return servlet ; } catch ( Exception e ) { e . printStackTrace (); } return null ; } } WebHandler import java.util.ArrayList ; import java.util.List ; import org.xml.sax.Attributes ; import org.xml.sax.SAXException ; import org.xml.sax.helpers.DefaultHandler ; class WebHandler extends DefaultHandler { private List Entity entities ; private List Mapping mappings ; private Entity entity ; private Mapping mapping ; private boolean isMapping ; private String tag ; @Override public void startDocument () throws SAXException { entities = new ArrayList (); mappings = new ArrayList (); } @Override public void startElement ( String uri , String localName , String qName , Attributes attributes ) { if ( null != qName ) { tag = qName ; if ( tag . equals ( servlet )) { entity = new Entity (); isMapping = false ; } else if ( tag . equals ( servlet-mapping )) { mapping = new Mapping (); isMapping = true ; } } } @Override public void characters ( char [] ch , int start , int length ) throws SAXException { String contents = new String ( ch , start , length ). trim (); if ( null != tag ) { // \u5904\u7406\u4e86\u7a7a if ( isMapping ) { if ( tag . equals ( servlet-name )) { mapping . setName ( contents ); } else if ( tag . equals ( url-pattern )) { mapping . addPattern ( contents ); } } else { if ( tag . equals ( servlet-name )) { entity . setName ( contents ); } else if ( tag . equals ( servlet-class )) { entity . setClz ( contents ); } } } } @Override public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( null != qName ) { if ( qName . equals ( servlet )) { entities . add ( entity ); } else if ( qName . equals ( servlet-mapping )) { mappings . add ( mapping ); } } tag = null ; } @Override public void endDocument () throws SAXException { System . out . println ( ----\u89e3\u6790\u6587\u6863\u7ed3\u675f---- ); } public List Entity getEntities () { return entities ; } public List Mapping getMappings () { return mappings ; } } WebContext import java.util.HashMap ; import java.util.List ; import java.util.Map ; @SuppressWarnings ( unused ) public class WebContext { private List Entity entities = null ; private List Mapping mappings = null ; // key-- servlet-name value -- servlet-class private Map String , String entityMap = new HashMap String , String (); // key -- url-pattern value -- servlet-name private Map String , String mappingMap = new HashMap String , String (); public WebContext ( List Entity entities , List Mapping mappings ) { this . entities = entities ; this . mappings = mappings ; for ( Entity entity : entities ) { entityMap . put ( entity . getName (), entity . getClz ()); } for ( Mapping mapping : mappings ) { for ( String pattern : mapping . getPatterns ()) { mappingMap . put ( pattern , mapping . getName ()); } } } public String getClz ( String pattern ) { String name = mappingMap . get ( pattern ); return entityMap . get ( name ); } } Servlet public interface Servlet { void service ( Request request , Response response ); } LoginServlet import Request ; import Response ; import Servlet ; public class LoginServlet implements Servlet { @Override public void service ( Request request , Response response ) { response . print ( html ); response . print ( head ); response . print ( meta http-equiv=\\ content-type\\ content=\\ text/html;charset=utf-8\\ ); response . print ( title ); response . print ( \u7b2c\u4e00\u4e2aservlet ); response . print ( /title ); response . print ( /head ); response . print ( body ); response . print ( \u6b22\u8fce\u56de\u6765: + request . getParameter ( uname )); response . print ( /body ); response . print ( /html ); } } RegisterServlet package webserver.server04.user ; import Request ; import Response ; import Servlet ; public class RegisterServlet implements Servlet { @Override public void service ( Request request , Response response ) { String uname = request . getParameter ( uname ); String [] favs = request . getParameterValues ( fav ); response . print ( html ); response . print ( head ); response . print ( meta http-equiv=\\ content-type\\ content=\\ text/html;charset=utf-8\\ ); response . print ( title ); response . print ( \u6ce8\u518c\u6210\u529f ); response . print ( /title ); response . print ( /head ); response . print ( body ); response . println ( \u4f60\u6ce8\u518c\u7684\u4fe1\u606f\u4e3a: + uname ); response . println ( \u4f60\u559c\u6b22\u7684\u7c7b\u578b\u4e3a: ); for ( String v : favs ) { if ( v . equals ( 0 )) { response . print ( type 0 ); } else if ( v . equals ( 1 )) { response . print ( type 1 ); } else if ( v . equals ( 2 )) { response . print ( type 1 ); } } response . print ( /body ); response . print ( /html ); } } Web xml ?xml version= 1.0 encoding= UTF-8 ? web-app servlet servlet-name login /servlet-name servlet-class webserver.server04.user.LoginServlet /servlet-class /servlet servlet servlet-name reg /servlet-name servlet-class webserver.server04.user.RegisterServlet /servlet-class /servlet servlet servlet-name others /servlet-name servlet-class webserver.server04.user.OtherServlet /servlet-class /servlet servlet-mapping servlet-name login /servlet-name url-pattern /login /url-pattern url-pattern /g /url-pattern /servlet-mapping servlet-mapping servlet-name reg /servlet-name url-pattern /reg /url-pattern /servlet-mapping servlet-mapping servlet-name others /servlet-name url-pattern /o /url-pattern /servlet-mapping /web-app Error html head meta http-equiv = content-type content = text/html;charset=utf-8 title 404\u9875\u9762 / title / head body h1 ERROR / h1 / body / html Index html head meta http-equiv = content-type content = text/html;charset=utf-8 title \u9996\u9875 / title / head body h1 welcome / h1 / body / html Login html head meta http-equiv = \\ content-type\\ content = \\ text/html;charset= utf-8 \\ title \u7b2c\u4e00\u4e2ahtml\u767b\u5f55 / title / head body h1 \u8868\u5355\u7684\u4f7f\u7528 / h1 form method = get action = http://localhost:8888/login \u7528\u6237\u540d: input type = text name = uname id = uname / \u5bc6\u7801: input type = password name = pwd id = pwd / input type = submit value = \u767b\u5f55 / / form / body / html Regist html head title \u6ce8\u518c\u9875\u9762 / title / head body h1 \u6b22\u8fce\u6ce8\u518c / h1 form method = post action = http://localhost:8888/r \u7528\u6237\u540d: input type = text name = uname id = uname / \u4f60\u5fc3\u4e2d\u7684\u5973\u795e: input type = checkbox name = fav value = 0 / type1 input type = checkbox name = fav value = 1 / type2 input type = checkbox name = fav value = 2 / type3 input type = submit value = \u767b\u5f55 / / form / body / html Authors Weiduo Sun - License This project is licensed under the MIT License - see the LICENSE.md file for details","title":"1 Servelt"},{"location":"Web/Servlet/Servlet/#java-servelt","text":"","title":"Java Servelt"},{"location":"Web/Servlet/Servlet/#overview","text":"","title":"Overview"},{"location":"Web/Servlet/Servlet/#entity","text":"public class Entity { private String name ; private String clz ; public Entity () { // TODO Auto-generated constructor stub } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public String getClz () { return clz ; } public void setClz ( String clz ) { this . clz = clz ; } }","title":"Entity"},{"location":"Web/Servlet/Servlet/#mapping","text":"import java.util.HashSet ; import java.util.Set ; public class Mapping { private String name ; private Set String patterns ; public Mapping () { patterns = new HashSet String (); } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } public Set String getPatterns () { return patterns ; } public void setPatterns ( Set String patterns ) { this . patterns = patterns ; } public void addPattern ( String pattern ) { this . patterns . add ( pattern ); } }","title":"Mapping"},{"location":"Web/Servlet/Servlet/#request","text":"import java.io.IOException ; import java.io.InputStream ; import java.io.UnsupportedEncodingException ; import java.net.Socket ; import java.util.ArrayList ; import java.util.Arrays ; import java.util.HashMap ; import java.util.List ; import java.util.Map ; public class Request { // \u534f\u8bae\u6d88\u606f private String requestInfo ; // \u8bf7\u6c42\u65b9\u5f0f private String method ; // \u8bf7\u6c42url private String url ; // \u8bf7\u6c42\u53c2\u6570 private String queryStr ; private Map String , List String parameterMap ; private final String CRLF = \\r\\n ; public Request ( Socket client ) throws IOException { this ( client . getInputStream ()); } public Request ( InputStream is ) { parameterMap = new HashMap (); byte [] datas = new byte [ 1024 * 1024 ]; int len ; try { len = is . read ( datas ); this . requestInfo = new String ( datas , 0 , len ); } catch ( IOException e ) { e . printStackTrace (); return ; } // \u5206\u89e3\u5b57\u7b26\u4e32 parseRequestInfo (); } private void parseRequestInfo () { System . out . println ( ------\u5206\u89e3------- ); System . out . println ( ---1\u3001\u83b7\u53d6\u8bf7\u6c42\u65b9\u5f0f: \u5f00\u5934\u5230\u7b2c\u4e00\u4e2a/------ ); this . method = this . requestInfo . substring ( 0 , this . requestInfo . indexOf ( / )). toLowerCase (); this . method = this . method . trim (); System . out . println ( ---2\u3001\u83b7\u53d6\u8bf7\u6c42url: \u7b2c\u4e00\u4e2a/ \u5230 HTTP/------ ); System . out . println ( ---\u53ef\u80fd\u5305\u542b\u8bf7\u6c42\u53c2\u6570? \u524d\u9762\u7684\u4e3aurl------ ); // 1)\u3001\u83b7\u53d6/\u7684\u4f4d\u7f6e int startIdx = this . requestInfo . indexOf ( / ) + 1 ; // 2)\u3001\u83b7\u53d6 HTTP/\u7684\u4f4d\u7f6e int endIdx = this . requestInfo . indexOf ( HTTP/ ); // 3)\u3001\u5206\u5272\u5b57\u7b26\u4e32 this . url = this . requestInfo . substring ( startIdx , endIdx ); // 4)\u3001\u83b7\u53d6\uff1f\u7684\u4f4d\u7f6e int queryIdx = this . url . indexOf ( ? ); if ( queryIdx = 0 ) { // \u8868\u793a\u5b58\u5728\u8bf7\u6c42\u53c2\u6570 String [] urlArray = this . url . split ( \\\\? ); this . url = urlArray [ 0 ]; queryStr = urlArray [ 1 ]; } System . out . println ( this . url ); System . out . println ( ---3\u3001\u83b7\u53d6\u8bf7\u6c42\u53c2\u6570:\u5982\u679cGet\u5df2\u7ecf\u83b7\u53d6,\u5982\u679c\u662fpost\u53ef\u80fd\u5728\u8bf7\u6c42\u4f53\u4e2d------ ); if ( method . equals ( post )) { String qStr = this . requestInfo . substring ( this . requestInfo . lastIndexOf ( CRLF )). trim (); System . out . println ( qStr + -- ); if ( null == queryStr ) { queryStr = qStr ; } else { queryStr += + qStr ; } } queryStr = null == queryStr ? : queryStr ; System . out . println ( method + -- + url + -- + queryStr ); // \u8f6c\u6210Map fav=1 fav=2 uname=shsxt age=18 others= convertMap (); } // \u5904\u7406\u8bf7\u6c42\u53c2\u6570\u4e3aMap private void convertMap () { // 1\u3001\u5206\u5272\u5b57\u7b26\u4e32 String [] keyValues = queryStr . split ( ); for ( String query : keyValues ) { // 2\u3001\u518d\u6b21\u5206\u5272\u5b57\u7b26\u4e32 = String [] kv = query . split ( = ); kv = Arrays . copyOf ( kv , 2 ); // \u83b7\u53d6key\u548cvalue String key = kv [ 0 ]; String value = kv [ 1 ] == null ? null : decode ( kv [ 1 ], utf-8 ); // \u5b58\u50a8\u5230map\u4e2d if (! parameterMap . containsKey ( key )) { // \u7b2c\u4e00\u6b21 parameterMap . put ( key , new ArrayList String ()); } parameterMap . get ( key ). add ( value ); } } private String decode ( String value , String enc ) { try { return java . net . URLDecoder . decode ( value , enc ); } catch ( UnsupportedEncodingException e ) { e . printStackTrace (); } return null ; } public String [] getParameterValues ( String key ) { List String values = this . parameterMap . get ( key ); if ( null == values || values . size () 1 ) { return null ; } return values . toArray ( new String [ 0 ]); } public String getParameter ( String key ) { String [] values = getParameterValues ( key ); return values == null ? null : values [ 0 ]; } public String getMethod () { return method ; } public String getUrl () { return url ; } public String getQueryStr () { return queryStr ; } }","title":"Request"},{"location":"Web/Servlet/Servlet/#response","text":"import java.io.BufferedWriter ; import java.io.IOException ; import java.io.OutputStream ; import java.io.OutputStreamWriter ; import java.net.Socket ; import java.util.Date ; public class Response { BufferedWriter bw ; // \u6b63\u6587 private StringBuilder content ; // \u534f\u8bae\u5934\uff08\u72b6\u6001\u884c\u4e0e\u8bf7\u6c42\u5934 \u56de\u8f66\uff09\u4fe1\u606f private StringBuilder headInfo ; private int len ; // \u6b63\u6587\u7684\u5b57\u8282\u6570 private final String BLANK = ; private final String CRLF = \\r\\n ; private Response () { content = new StringBuilder (); headInfo = new StringBuilder (); len = 0 ; } public Response ( Socket client ) { this (); try { bw = new BufferedWriter ( new OutputStreamWriter ( client . getOutputStream ())); } catch ( IOException e ) { e . printStackTrace (); } } public Response ( OutputStream os ) { this (); bw = new BufferedWriter ( new OutputStreamWriter ( os )); } // \u52a8\u6001\u6dfb\u52a0\u5185\u5bb9 public Response print ( String info ) { content . append ( info ); len += info . getBytes (). length ; return this ; } public Response println ( String info ) { content . append ( info ). append ( CRLF ); len += ( info + CRLF ). getBytes (). length ; return this ; } public void pushToBrowser ( int code ) throws IOException { if ( null == headInfo ) { code = 505 ; } createHeadInfo ( code ); bw . append ( headInfo ); bw . append ( content ); bw . flush (); } // \u6784\u5efa\u5934\u4fe1\u606f private void createHeadInfo ( int code ) { // 1\u3001\u54cd\u5e94\u884c: HTTP/1.1 200 OK headInfo . append ( HTTP/1.1 ). append ( BLANK ); headInfo . append ( code ). append ( BLANK ); switch ( code ) { case 200 : headInfo . append ( OK ). append ( CRLF ); break ; case 404 : headInfo . append ( NOT FOUND ). append ( CRLF ); break ; case 505 : headInfo . append ( SERVER ERROR ). append ( CRLF ); break ; } headInfo . append ( Date: ). append ( new Date ()). append ( CRLF ); headInfo . append ( Server: ). append ( wsserver Server/0.0.1;charset=UTF-8 ). append ( CRLF ); headInfo . append ( Content-type:text/html ). append ( CRLF ); headInfo . append ( Content-length: + len ). append ( CRLF ); headInfo . append ( CRLF ); } }","title":"Response"},{"location":"Web/Servlet/Servlet/#server","text":"import java.io.IOException ; import java.net.ServerSocket ; import java.net.Socket ; public class Server { private ServerSocket serverSocket ; private boolean isRunning ; public static void main ( String [] args ) { Server server = new Server (); server . start (); } // \u542f\u52a8\u670d\u52a1 public void start () { try { serverSocket = new ServerSocket ( 8888 ); isRunning = true ; receive (); } catch ( IOException e ) { e . printStackTrace (); System . out . println ( \u670d\u52a1\u5668\u542f\u52a8\u5931\u8d25.... ); } } // \u63a5\u53d7\u8fde\u63a5\u5904\u7406 public void receive () { while ( isRunning ) { try { Socket client = serverSocket . accept (); System . out . println ( \u4e00\u4e2a\u5ba2\u6237\u7aef\u5efa\u7acb\u4e86\u8fde\u63a5.... ); // \u591a\u7ebf\u7a0b\u5904\u7406 new Thread ( new Dispatcher ( client )). start (); } catch ( IOException e ) { e . printStackTrace (); } } } // \u505c\u6b62\u670d\u52a1 public void stop () { isRunning = false ; try { this . serverSocket . close (); System . out . println ( \u670d\u52a1\u5668\u5df2\u505c\u6b62 ); } catch ( IOException e ) { e . printStackTrace (); } } }","title":"Server"},{"location":"Web/Servlet/Servlet/#dispatcher","text":"import java.io.IOException ; import java.io.InputStream ; import java.net.Socket ; public class Dispatcher implements Runnable { private Socket client ; private Request request ; private Response response ; public Dispatcher ( Socket client ) { this . client = client ; try { request = new Request ( client ); response = new Response ( client ); } catch ( IOException e ) { e . printStackTrace (); this . release (); } } // \u91ca\u653e\u8d44\u6e90 private void release () { try { client . close (); } catch ( IOException e1 ) { e1 . printStackTrace (); } } @Override public void run () { try { if ( null == request . getUrl () || request . getUrl (). equals ( )) { InputStream is = Thread . currentThread (). getContextClassLoader () . getResourceAsStream ( index.html ); int len ; byte [] flush = new byte [ 1024 ]; while (( len = is . read ( flush )) != - 1 ) { response . print ( new String ( flush , 0 , len )); } response . pushToBrowser ( 200 ); is . close (); } Servlet servlet = null ; if ( null != request . getUrl () ! request . getUrl (). equals ( )) servlet = ( Servlet ) WebApp . getServletFromUrl ( request . getUrl ()); if ( null != servlet ) { servlet . service ( request , response ); // \u5173\u6ce8\u4e86\u72b6\u6001\u7801 response . pushToBrowser ( 200 ); } else { // \u9519\u8bef.... InputStream is = Thread . currentThread (). getContextClassLoader () . getResourceAsStream ( error.html ); int len ; byte [] flush = new byte [ 1024 ]; while (( len = is . read ( flush )) != - 1 ) { response . print ( new String ( flush , 0 , len )); } response . pushToBrowser ( 404 ); is . close (); } } catch ( Exception e ) { try { response . pushToBrowser ( 500 ); } catch ( IOException e1 ) { e1 . printStackTrace (); } } release (); } }","title":"Dispatcher"},{"location":"Web/Servlet/Servlet/#webapp","text":"import javax.xml.parsers.SAXParser ; import javax.xml.parsers.SAXParserFactory ; public class WebApp { private static WebContext webContext ; static { try { // SAX \u89e3\u6790 // 1.\u83b7\u53d6\u89e3\u6790\u5de5\u5382 SAXParserFactory factory = SAXParserFactory . newInstance (); // 2. \u4ece\u89e3\u6790\u5de5\u5382\u4e2d\u83b7\u53d6\u89e3\u6790\u5668 SAXParser parse = factory . newSAXParser (); // 3. \u52a0\u8f7d\u6587\u6863 Document \u6ce8\u518c\u5904\u7406\u5668 // 4. \u7f16\u8f91\u5904\u7406\u5668 WebHandler handler = new WebHandler (); parse . parse ( Thread . currentThread (). getContextClassLoader (). getResourceAsStream ( web.xml ), handler ); webContext = new WebContext ( handler . getEntities (), handler . getMappings ()); } catch ( Exception e ) { System . out . println ( \u89e3\u6790\u914d\u7f6e\u6587\u4ef6\u9519\u8bef ); } } public static Servlet getServletFromUrl ( String url ) { // \u5047\u8bbe\u4f60\u8f93\u5165\u4e86 /login String className = webContext . getClz ( / + url ); System . out . println ( className: + className ); Class ? clz ; try { clz = Class . forName ( className ); Servlet servlet = ( Servlet ) clz . getConstructor (). newInstance (); System . out . println ( servlet ); return servlet ; } catch ( Exception e ) { e . printStackTrace (); } return null ; } }","title":"WebApp"},{"location":"Web/Servlet/Servlet/#webhandler","text":"import java.util.ArrayList ; import java.util.List ; import org.xml.sax.Attributes ; import org.xml.sax.SAXException ; import org.xml.sax.helpers.DefaultHandler ; class WebHandler extends DefaultHandler { private List Entity entities ; private List Mapping mappings ; private Entity entity ; private Mapping mapping ; private boolean isMapping ; private String tag ; @Override public void startDocument () throws SAXException { entities = new ArrayList (); mappings = new ArrayList (); } @Override public void startElement ( String uri , String localName , String qName , Attributes attributes ) { if ( null != qName ) { tag = qName ; if ( tag . equals ( servlet )) { entity = new Entity (); isMapping = false ; } else if ( tag . equals ( servlet-mapping )) { mapping = new Mapping (); isMapping = true ; } } } @Override public void characters ( char [] ch , int start , int length ) throws SAXException { String contents = new String ( ch , start , length ). trim (); if ( null != tag ) { // \u5904\u7406\u4e86\u7a7a if ( isMapping ) { if ( tag . equals ( servlet-name )) { mapping . setName ( contents ); } else if ( tag . equals ( url-pattern )) { mapping . addPattern ( contents ); } } else { if ( tag . equals ( servlet-name )) { entity . setName ( contents ); } else if ( tag . equals ( servlet-class )) { entity . setClz ( contents ); } } } } @Override public void endElement ( String uri , String localName , String qName ) throws SAXException { if ( null != qName ) { if ( qName . equals ( servlet )) { entities . add ( entity ); } else if ( qName . equals ( servlet-mapping )) { mappings . add ( mapping ); } } tag = null ; } @Override public void endDocument () throws SAXException { System . out . println ( ----\u89e3\u6790\u6587\u6863\u7ed3\u675f---- ); } public List Entity getEntities () { return entities ; } public List Mapping getMappings () { return mappings ; } }","title":"WebHandler"},{"location":"Web/Servlet/Servlet/#webcontext","text":"import java.util.HashMap ; import java.util.List ; import java.util.Map ; @SuppressWarnings ( unused ) public class WebContext { private List Entity entities = null ; private List Mapping mappings = null ; // key-- servlet-name value -- servlet-class private Map String , String entityMap = new HashMap String , String (); // key -- url-pattern value -- servlet-name private Map String , String mappingMap = new HashMap String , String (); public WebContext ( List Entity entities , List Mapping mappings ) { this . entities = entities ; this . mappings = mappings ; for ( Entity entity : entities ) { entityMap . put ( entity . getName (), entity . getClz ()); } for ( Mapping mapping : mappings ) { for ( String pattern : mapping . getPatterns ()) { mappingMap . put ( pattern , mapping . getName ()); } } } public String getClz ( String pattern ) { String name = mappingMap . get ( pattern ); return entityMap . get ( name ); } }","title":"WebContext"},{"location":"Web/Servlet/Servlet/#servlet","text":"public interface Servlet { void service ( Request request , Response response ); }","title":"Servlet"},{"location":"Web/Servlet/Servlet/#loginservlet","text":"import Request ; import Response ; import Servlet ; public class LoginServlet implements Servlet { @Override public void service ( Request request , Response response ) { response . print ( html ); response . print ( head ); response . print ( meta http-equiv=\\ content-type\\ content=\\ text/html;charset=utf-8\\ ); response . print ( title ); response . print ( \u7b2c\u4e00\u4e2aservlet ); response . print ( /title ); response . print ( /head ); response . print ( body ); response . print ( \u6b22\u8fce\u56de\u6765: + request . getParameter ( uname )); response . print ( /body ); response . print ( /html ); } }","title":"LoginServlet"},{"location":"Web/Servlet/Servlet/#registerservlet","text":"package webserver.server04.user ; import Request ; import Response ; import Servlet ; public class RegisterServlet implements Servlet { @Override public void service ( Request request , Response response ) { String uname = request . getParameter ( uname ); String [] favs = request . getParameterValues ( fav ); response . print ( html ); response . print ( head ); response . print ( meta http-equiv=\\ content-type\\ content=\\ text/html;charset=utf-8\\ ); response . print ( title ); response . print ( \u6ce8\u518c\u6210\u529f ); response . print ( /title ); response . print ( /head ); response . print ( body ); response . println ( \u4f60\u6ce8\u518c\u7684\u4fe1\u606f\u4e3a: + uname ); response . println ( \u4f60\u559c\u6b22\u7684\u7c7b\u578b\u4e3a: ); for ( String v : favs ) { if ( v . equals ( 0 )) { response . print ( type 0 ); } else if ( v . equals ( 1 )) { response . print ( type 1 ); } else if ( v . equals ( 2 )) { response . print ( type 1 ); } } response . print ( /body ); response . print ( /html ); } }","title":"RegisterServlet"},{"location":"Web/Servlet/Servlet/#web-xml","text":"?xml version= 1.0 encoding= UTF-8 ? web-app servlet servlet-name login /servlet-name servlet-class webserver.server04.user.LoginServlet /servlet-class /servlet servlet servlet-name reg /servlet-name servlet-class webserver.server04.user.RegisterServlet /servlet-class /servlet servlet servlet-name others /servlet-name servlet-class webserver.server04.user.OtherServlet /servlet-class /servlet servlet-mapping servlet-name login /servlet-name url-pattern /login /url-pattern url-pattern /g /url-pattern /servlet-mapping servlet-mapping servlet-name reg /servlet-name url-pattern /reg /url-pattern /servlet-mapping servlet-mapping servlet-name others /servlet-name url-pattern /o /url-pattern /servlet-mapping /web-app","title":"Web xml"},{"location":"Web/Servlet/Servlet/#error","text":"html head meta http-equiv = content-type content = text/html;charset=utf-8 title 404\u9875\u9762 / title / head body h1 ERROR / h1 / body / html","title":"Error"},{"location":"Web/Servlet/Servlet/#index","text":"html head meta http-equiv = content-type content = text/html;charset=utf-8 title \u9996\u9875 / title / head body h1 welcome / h1 / body / html","title":"Index"},{"location":"Web/Servlet/Servlet/#login","text":"html head meta http-equiv = \\ content-type\\ content = \\ text/html;charset= utf-8 \\ title \u7b2c\u4e00\u4e2ahtml\u767b\u5f55 / title / head body h1 \u8868\u5355\u7684\u4f7f\u7528 / h1 form method = get action = http://localhost:8888/login \u7528\u6237\u540d: input type = text name = uname id = uname / \u5bc6\u7801: input type = password name = pwd id = pwd / input type = submit value = \u767b\u5f55 / / form / body / html","title":"Login"},{"location":"Web/Servlet/Servlet/#regist","text":"html head title \u6ce8\u518c\u9875\u9762 / title / head body h1 \u6b22\u8fce\u6ce8\u518c / h1 form method = post action = http://localhost:8888/r \u7528\u6237\u540d: input type = text name = uname id = uname / \u4f60\u5fc3\u4e2d\u7684\u5973\u795e: input type = checkbox name = fav value = 0 / type1 input type = checkbox name = fav value = 1 / type2 input type = checkbox name = fav value = 2 / type3 input type = submit value = \u767b\u5f55 / / form / body / html","title":"Regist"},{"location":"Web/Servlet/Servlet/#authors","text":"Weiduo Sun -","title":"Authors"},{"location":"Web/Servlet/Servlet/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"}]}